// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ProtocolInfo.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct GetProtocolVersionsRequestProto {
    // message fields
    protocol: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetProtocolVersionsRequestProto {
    fn default() -> &'a GetProtocolVersionsRequestProto {
        <GetProtocolVersionsRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetProtocolVersionsRequestProto {
    pub fn new() -> GetProtocolVersionsRequestProto {
        ::std::default::Default::default()
    }

    // required string protocol = 1;


    pub fn get_protocol(&self) -> &str {
        match self.protocol.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    pub fn has_protocol(&self) -> bool {
        self.protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        if self.protocol.is_none() {
            self.protocol.set_default();
        }
        self.protocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        self.protocol.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetProtocolVersionsRequestProto {
    fn is_initialized(&self) -> bool {
        if self.protocol.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.protocol)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.protocol.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.protocol.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetProtocolVersionsRequestProto {
        GetProtocolVersionsRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &GetProtocolVersionsRequestProto| { &m.protocol },
                |m: &mut GetProtocolVersionsRequestProto| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetProtocolVersionsRequestProto>(
                "GetProtocolVersionsRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetProtocolVersionsRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetProtocolVersionsRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetProtocolVersionsRequestProto::new)
    }
}

impl ::protobuf::Clear for GetProtocolVersionsRequestProto {
    fn clear(&mut self) {
        self.protocol.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetProtocolVersionsRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProtocolVersionsRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProtocolVersionProto {
    // message fields
    rpcKind: ::protobuf::SingularField<::std::string::String>,
    pub versions: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtocolVersionProto {
    fn default() -> &'a ProtocolVersionProto {
        <ProtocolVersionProto as ::protobuf::Message>::default_instance()
    }
}

impl ProtocolVersionProto {
    pub fn new() -> ProtocolVersionProto {
        ::std::default::Default::default()
    }

    // required string rpcKind = 1;


    pub fn get_rpcKind(&self) -> &str {
        match self.rpcKind.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_rpcKind(&mut self) {
        self.rpcKind.clear();
    }

    pub fn has_rpcKind(&self) -> bool {
        self.rpcKind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpcKind(&mut self, v: ::std::string::String) {
        self.rpcKind = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpcKind(&mut self) -> &mut ::std::string::String {
        if self.rpcKind.is_none() {
            self.rpcKind.set_default();
        }
        self.rpcKind.as_mut().unwrap()
    }

    // Take field
    pub fn take_rpcKind(&mut self) -> ::std::string::String {
        self.rpcKind.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint64 versions = 2;


    pub fn get_versions(&self) -> &[u64] {
        &self.versions
    }
    pub fn clear_versions(&mut self) {
        self.versions.clear();
    }

    // Param is passed by value, moved
    pub fn set_versions(&mut self, v: ::std::vec::Vec<u64>) {
        self.versions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_versions(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.versions
    }

    // Take field
    pub fn take_versions(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.versions, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ProtocolVersionProto {
    fn is_initialized(&self) -> bool {
        if self.rpcKind.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rpcKind)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.versions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rpcKind.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.versions {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rpcKind.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.versions {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtocolVersionProto {
        ProtocolVersionProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rpcKind",
                |m: &ProtocolVersionProto| { &m.rpcKind },
                |m: &mut ProtocolVersionProto| { &mut m.rpcKind },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "versions",
                |m: &ProtocolVersionProto| { &m.versions },
                |m: &mut ProtocolVersionProto| { &mut m.versions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtocolVersionProto>(
                "ProtocolVersionProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtocolVersionProto {
        static instance: ::protobuf::rt::LazyV2<ProtocolVersionProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtocolVersionProto::new)
    }
}

impl ::protobuf::Clear for ProtocolVersionProto {
    fn clear(&mut self) {
        self.rpcKind.clear();
        self.versions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtocolVersionProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolVersionProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetProtocolVersionsResponseProto {
    // message fields
    pub protocolVersions: ::protobuf::RepeatedField<ProtocolVersionProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetProtocolVersionsResponseProto {
    fn default() -> &'a GetProtocolVersionsResponseProto {
        <GetProtocolVersionsResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetProtocolVersionsResponseProto {
    pub fn new() -> GetProtocolVersionsResponseProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.common.ProtocolVersionProto protocolVersions = 1;


    pub fn get_protocolVersions(&self) -> &[ProtocolVersionProto] {
        &self.protocolVersions
    }
    pub fn clear_protocolVersions(&mut self) {
        self.protocolVersions.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocolVersions(&mut self, v: ::protobuf::RepeatedField<ProtocolVersionProto>) {
        self.protocolVersions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_protocolVersions(&mut self) -> &mut ::protobuf::RepeatedField<ProtocolVersionProto> {
        &mut self.protocolVersions
    }

    // Take field
    pub fn take_protocolVersions(&mut self) -> ::protobuf::RepeatedField<ProtocolVersionProto> {
        ::std::mem::replace(&mut self.protocolVersions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetProtocolVersionsResponseProto {
    fn is_initialized(&self) -> bool {
        for v in &self.protocolVersions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.protocolVersions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.protocolVersions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.protocolVersions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetProtocolVersionsResponseProto {
        GetProtocolVersionsResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtocolVersionProto>>(
                "protocolVersions",
                |m: &GetProtocolVersionsResponseProto| { &m.protocolVersions },
                |m: &mut GetProtocolVersionsResponseProto| { &mut m.protocolVersions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetProtocolVersionsResponseProto>(
                "GetProtocolVersionsResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetProtocolVersionsResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetProtocolVersionsResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetProtocolVersionsResponseProto::new)
    }
}

impl ::protobuf::Clear for GetProtocolVersionsResponseProto {
    fn clear(&mut self) {
        self.protocolVersions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetProtocolVersionsResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProtocolVersionsResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetProtocolSignatureRequestProto {
    // message fields
    protocol: ::protobuf::SingularField<::std::string::String>,
    rpcKind: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetProtocolSignatureRequestProto {
    fn default() -> &'a GetProtocolSignatureRequestProto {
        <GetProtocolSignatureRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetProtocolSignatureRequestProto {
    pub fn new() -> GetProtocolSignatureRequestProto {
        ::std::default::Default::default()
    }

    // required string protocol = 1;


    pub fn get_protocol(&self) -> &str {
        match self.protocol.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    pub fn has_protocol(&self) -> bool {
        self.protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        if self.protocol.is_none() {
            self.protocol.set_default();
        }
        self.protocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        self.protocol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string rpcKind = 2;


    pub fn get_rpcKind(&self) -> &str {
        match self.rpcKind.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_rpcKind(&mut self) {
        self.rpcKind.clear();
    }

    pub fn has_rpcKind(&self) -> bool {
        self.rpcKind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpcKind(&mut self, v: ::std::string::String) {
        self.rpcKind = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpcKind(&mut self) -> &mut ::std::string::String {
        if self.rpcKind.is_none() {
            self.rpcKind.set_default();
        }
        self.rpcKind.as_mut().unwrap()
    }

    // Take field
    pub fn take_rpcKind(&mut self) -> ::std::string::String {
        self.rpcKind.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetProtocolSignatureRequestProto {
    fn is_initialized(&self) -> bool {
        if self.protocol.is_none() {
            return false;
        }
        if self.rpcKind.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.protocol)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rpcKind)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.protocol.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.rpcKind.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.protocol.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.rpcKind.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetProtocolSignatureRequestProto {
        GetProtocolSignatureRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &GetProtocolSignatureRequestProto| { &m.protocol },
                |m: &mut GetProtocolSignatureRequestProto| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rpcKind",
                |m: &GetProtocolSignatureRequestProto| { &m.rpcKind },
                |m: &mut GetProtocolSignatureRequestProto| { &mut m.rpcKind },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetProtocolSignatureRequestProto>(
                "GetProtocolSignatureRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetProtocolSignatureRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetProtocolSignatureRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetProtocolSignatureRequestProto::new)
    }
}

impl ::protobuf::Clear for GetProtocolSignatureRequestProto {
    fn clear(&mut self) {
        self.protocol.clear();
        self.rpcKind.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetProtocolSignatureRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProtocolSignatureRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetProtocolSignatureResponseProto {
    // message fields
    pub protocolSignature: ::protobuf::RepeatedField<ProtocolSignatureProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetProtocolSignatureResponseProto {
    fn default() -> &'a GetProtocolSignatureResponseProto {
        <GetProtocolSignatureResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetProtocolSignatureResponseProto {
    pub fn new() -> GetProtocolSignatureResponseProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.common.ProtocolSignatureProto protocolSignature = 1;


    pub fn get_protocolSignature(&self) -> &[ProtocolSignatureProto] {
        &self.protocolSignature
    }
    pub fn clear_protocolSignature(&mut self) {
        self.protocolSignature.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocolSignature(&mut self, v: ::protobuf::RepeatedField<ProtocolSignatureProto>) {
        self.protocolSignature = v;
    }

    // Mutable pointer to the field.
    pub fn mut_protocolSignature(&mut self) -> &mut ::protobuf::RepeatedField<ProtocolSignatureProto> {
        &mut self.protocolSignature
    }

    // Take field
    pub fn take_protocolSignature(&mut self) -> ::protobuf::RepeatedField<ProtocolSignatureProto> {
        ::std::mem::replace(&mut self.protocolSignature, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetProtocolSignatureResponseProto {
    fn is_initialized(&self) -> bool {
        for v in &self.protocolSignature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.protocolSignature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.protocolSignature {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.protocolSignature {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetProtocolSignatureResponseProto {
        GetProtocolSignatureResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtocolSignatureProto>>(
                "protocolSignature",
                |m: &GetProtocolSignatureResponseProto| { &m.protocolSignature },
                |m: &mut GetProtocolSignatureResponseProto| { &mut m.protocolSignature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetProtocolSignatureResponseProto>(
                "GetProtocolSignatureResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetProtocolSignatureResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetProtocolSignatureResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetProtocolSignatureResponseProto::new)
    }
}

impl ::protobuf::Clear for GetProtocolSignatureResponseProto {
    fn clear(&mut self) {
        self.protocolSignature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetProtocolSignatureResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProtocolSignatureResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProtocolSignatureProto {
    // message fields
    version: ::std::option::Option<u64>,
    pub methods: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtocolSignatureProto {
    fn default() -> &'a ProtocolSignatureProto {
        <ProtocolSignatureProto as ::protobuf::Message>::default_instance()
    }
}

impl ProtocolSignatureProto {
    pub fn new() -> ProtocolSignatureProto {
        ::std::default::Default::default()
    }

    // required uint64 version = 1;


    pub fn get_version(&self) -> u64 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = ::std::option::Option::Some(v);
    }

    // repeated uint32 methods = 2;


    pub fn get_methods(&self) -> &[u32] {
        &self.methods
    }
    pub fn clear_methods(&mut self) {
        self.methods.clear();
    }

    // Param is passed by value, moved
    pub fn set_methods(&mut self, v: ::std::vec::Vec<u32>) {
        self.methods = v;
    }

    // Mutable pointer to the field.
    pub fn mut_methods(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.methods
    }

    // Take field
    pub fn take_methods(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.methods, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ProtocolSignatureProto {
    fn is_initialized(&self) -> bool {
        if self.version.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.methods)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.methods {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            os.write_uint64(1, v)?;
        }
        for v in &self.methods {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtocolSignatureProto {
        ProtocolSignatureProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "version",
                |m: &ProtocolSignatureProto| { &m.version },
                |m: &mut ProtocolSignatureProto| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "methods",
                |m: &ProtocolSignatureProto| { &m.methods },
                |m: &mut ProtocolSignatureProto| { &mut m.methods },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtocolSignatureProto>(
                "ProtocolSignatureProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtocolSignatureProto {
        static instance: ::protobuf::rt::LazyV2<ProtocolSignatureProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtocolSignatureProto::new)
    }
}

impl ::protobuf::Clear for ProtocolSignatureProto {
    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.methods.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtocolSignatureProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolSignatureProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12ProtocolInfo.proto\x12\rhadoop.common\"A\n\x1fGetProtocolVersionsR\
    equestProto\x12\x1c\n\x08protocol\x18\x01\x20\x02(\tR\x08protocolB\0:\0\
    \"R\n\x14ProtocolVersionProto\x12\x1a\n\x07rpcKind\x18\x01\x20\x02(\tR\
    \x07rpcKindB\0\x12\x1c\n\x08versions\x18\x02\x20\x03(\x04R\x08versionsB\
    \0:\0\"w\n\x20GetProtocolVersionsResponseProto\x12Q\n\x10protocolVersion\
    s\x18\x01\x20\x03(\x0b2#.hadoop.common.ProtocolVersionProtoR\x10protocol\
    VersionsB\0:\0\"^\n\x20GetProtocolSignatureRequestProto\x12\x1c\n\x08pro\
    tocol\x18\x01\x20\x02(\tR\x08protocolB\0\x12\x1a\n\x07rpcKind\x18\x02\
    \x20\x02(\tR\x07rpcKindB\0:\0\"|\n!GetProtocolSignatureResponseProto\x12\
    U\n\x11protocolSignature\x18\x01\x20\x03(\x0b2%.hadoop.common.ProtocolSi\
    gnatureProtoR\x11protocolSignatureB\0:\0\"R\n\x16ProtocolSignatureProto\
    \x12\x1a\n\x07version\x18\x01\x20\x02(\x04R\x07versionB\0\x12\x1a\n\x07m\
    ethods\x18\x02\x20\x03(\rR\x07methodsB\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
