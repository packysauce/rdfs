// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `GenericRefreshProtocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct GenericRefreshRequestProto {
    // message fields
    identifier: ::protobuf::SingularField<::std::string::String>,
    pub args: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenericRefreshRequestProto {
    fn default() -> &'a GenericRefreshRequestProto {
        <GenericRefreshRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GenericRefreshRequestProto {
    pub fn new() -> GenericRefreshRequestProto {
        ::std::default::Default::default()
    }

    // optional string identifier = 1;


    pub fn get_identifier(&self) -> &str {
        match self.identifier.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_identifier(&mut self) {
        self.identifier.clear();
    }

    pub fn has_identifier(&self) -> bool {
        self.identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: ::std::string::String) {
        self.identifier = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut ::std::string::String {
        if self.identifier.is_none() {
            self.identifier.set_default();
        }
        self.identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_identifier(&mut self) -> ::std::string::String {
        self.identifier.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string args = 2;


    pub fn get_args(&self) -> &[::std::string::String] {
        &self.args
    }
    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_args(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.args, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenericRefreshRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.identifier)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.args)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.identifier.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.args {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.identifier.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.args {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenericRefreshRequestProto {
        GenericRefreshRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "identifier",
                |m: &GenericRefreshRequestProto| { &m.identifier },
                |m: &mut GenericRefreshRequestProto| { &mut m.identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "args",
                |m: &GenericRefreshRequestProto| { &m.args },
                |m: &mut GenericRefreshRequestProto| { &mut m.args },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenericRefreshRequestProto>(
                "GenericRefreshRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenericRefreshRequestProto {
        static instance: ::protobuf::rt::LazyV2<GenericRefreshRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenericRefreshRequestProto::new)
    }
}

impl ::protobuf::Clear for GenericRefreshRequestProto {
    fn clear(&mut self) {
        self.identifier.clear();
        self.args.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenericRefreshRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericRefreshRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenericRefreshResponseProto {
    // message fields
    exitStatus: ::std::option::Option<i32>,
    userMessage: ::protobuf::SingularField<::std::string::String>,
    senderName: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenericRefreshResponseProto {
    fn default() -> &'a GenericRefreshResponseProto {
        <GenericRefreshResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GenericRefreshResponseProto {
    pub fn new() -> GenericRefreshResponseProto {
        ::std::default::Default::default()
    }

    // optional int32 exitStatus = 1;


    pub fn get_exitStatus(&self) -> i32 {
        self.exitStatus.unwrap_or(0)
    }
    pub fn clear_exitStatus(&mut self) {
        self.exitStatus = ::std::option::Option::None;
    }

    pub fn has_exitStatus(&self) -> bool {
        self.exitStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_exitStatus(&mut self, v: i32) {
        self.exitStatus = ::std::option::Option::Some(v);
    }

    // optional string userMessage = 2;


    pub fn get_userMessage(&self) -> &str {
        match self.userMessage.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_userMessage(&mut self) {
        self.userMessage.clear();
    }

    pub fn has_userMessage(&self) -> bool {
        self.userMessage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_userMessage(&mut self, v: ::std::string::String) {
        self.userMessage = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_userMessage(&mut self) -> &mut ::std::string::String {
        if self.userMessage.is_none() {
            self.userMessage.set_default();
        }
        self.userMessage.as_mut().unwrap()
    }

    // Take field
    pub fn take_userMessage(&mut self) -> ::std::string::String {
        self.userMessage.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string senderName = 3;


    pub fn get_senderName(&self) -> &str {
        match self.senderName.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_senderName(&mut self) {
        self.senderName.clear();
    }

    pub fn has_senderName(&self) -> bool {
        self.senderName.is_some()
    }

    // Param is passed by value, moved
    pub fn set_senderName(&mut self, v: ::std::string::String) {
        self.senderName = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_senderName(&mut self) -> &mut ::std::string::String {
        if self.senderName.is_none() {
            self.senderName.set_default();
        }
        self.senderName.as_mut().unwrap()
    }

    // Take field
    pub fn take_senderName(&mut self) -> ::std::string::String {
        self.senderName.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for GenericRefreshResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.exitStatus = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.userMessage)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.senderName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.exitStatus {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.userMessage.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.senderName.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.exitStatus {
            os.write_int32(1, v)?;
        }
        if let Some(ref v) = self.userMessage.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.senderName.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenericRefreshResponseProto {
        GenericRefreshResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "exitStatus",
                |m: &GenericRefreshResponseProto| { &m.exitStatus },
                |m: &mut GenericRefreshResponseProto| { &mut m.exitStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "userMessage",
                |m: &GenericRefreshResponseProto| { &m.userMessage },
                |m: &mut GenericRefreshResponseProto| { &mut m.userMessage },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "senderName",
                |m: &GenericRefreshResponseProto| { &m.senderName },
                |m: &mut GenericRefreshResponseProto| { &mut m.senderName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenericRefreshResponseProto>(
                "GenericRefreshResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenericRefreshResponseProto {
        static instance: ::protobuf::rt::LazyV2<GenericRefreshResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenericRefreshResponseProto::new)
    }
}

impl ::protobuf::Clear for GenericRefreshResponseProto {
    fn clear(&mut self) {
        self.exitStatus = ::std::option::Option::None;
        self.userMessage.clear();
        self.senderName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenericRefreshResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericRefreshResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenericRefreshResponseCollectionProto {
    // message fields
    pub responses: ::protobuf::RepeatedField<GenericRefreshResponseProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenericRefreshResponseCollectionProto {
    fn default() -> &'a GenericRefreshResponseCollectionProto {
        <GenericRefreshResponseCollectionProto as ::protobuf::Message>::default_instance()
    }
}

impl GenericRefreshResponseCollectionProto {
    pub fn new() -> GenericRefreshResponseCollectionProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.common.GenericRefreshResponseProto responses = 1;


    pub fn get_responses(&self) -> &[GenericRefreshResponseProto] {
        &self.responses
    }
    pub fn clear_responses(&mut self) {
        self.responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_responses(&mut self, v: ::protobuf::RepeatedField<GenericRefreshResponseProto>) {
        self.responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_responses(&mut self) -> &mut ::protobuf::RepeatedField<GenericRefreshResponseProto> {
        &mut self.responses
    }

    // Take field
    pub fn take_responses(&mut self) -> ::protobuf::RepeatedField<GenericRefreshResponseProto> {
        ::std::mem::replace(&mut self.responses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenericRefreshResponseCollectionProto {
    fn is_initialized(&self) -> bool {
        for v in &self.responses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.responses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.responses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenericRefreshResponseCollectionProto {
        GenericRefreshResponseCollectionProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GenericRefreshResponseProto>>(
                "responses",
                |m: &GenericRefreshResponseCollectionProto| { &m.responses },
                |m: &mut GenericRefreshResponseCollectionProto| { &mut m.responses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenericRefreshResponseCollectionProto>(
                "GenericRefreshResponseCollectionProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenericRefreshResponseCollectionProto {
        static instance: ::protobuf::rt::LazyV2<GenericRefreshResponseCollectionProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenericRefreshResponseCollectionProto::new)
    }
}

impl ::protobuf::Clear for GenericRefreshResponseCollectionProto {
    fn clear(&mut self) {
        self.responses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenericRefreshResponseCollectionProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericRefreshResponseCollectionProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cGenericRefreshProtocol.proto\x12\rhadoop.common\"V\n\x1aGenericRef\
    reshRequestProto\x12\x20\n\nidentifier\x18\x01\x20\x01(\tR\nidentifierB\
    \0\x12\x14\n\x04args\x18\x02\x20\x03(\tR\x04argsB\0:\0\"\x87\x01\n\x1bGe\
    nericRefreshResponseProto\x12\x20\n\nexitStatus\x18\x01\x20\x01(\x05R\ne\
    xitStatusB\0\x12\"\n\x0buserMessage\x18\x02\x20\x01(\tR\x0buserMessageB\
    \0\x12\x20\n\nsenderName\x18\x03\x20\x01(\tR\nsenderNameB\0:\0\"u\n%Gene\
    ricRefreshResponseCollectionProto\x12J\n\tresponses\x18\x01\x20\x03(\x0b\
    2*.hadoop.common.GenericRefreshResponseProtoR\tresponsesB\0:\0B\0b\x06pr\
    oto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
