// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `HdfsServer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct BlockKeyProto {
    // message fields
    keyId: ::std::option::Option<u32>,
    expiryDate: ::std::option::Option<u64>,
    keyBytes: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockKeyProto {
    fn default() -> &'a BlockKeyProto {
        <BlockKeyProto as ::protobuf::Message>::default_instance()
    }
}

impl BlockKeyProto {
    pub fn new() -> BlockKeyProto {
        ::std::default::Default::default()
    }

    // required uint32 keyId = 1;


    pub fn get_keyId(&self) -> u32 {
        self.keyId.unwrap_or(0)
    }
    pub fn clear_keyId(&mut self) {
        self.keyId = ::std::option::Option::None;
    }

    pub fn has_keyId(&self) -> bool {
        self.keyId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keyId(&mut self, v: u32) {
        self.keyId = ::std::option::Option::Some(v);
    }

    // required uint64 expiryDate = 2;


    pub fn get_expiryDate(&self) -> u64 {
        self.expiryDate.unwrap_or(0)
    }
    pub fn clear_expiryDate(&mut self) {
        self.expiryDate = ::std::option::Option::None;
    }

    pub fn has_expiryDate(&self) -> bool {
        self.expiryDate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiryDate(&mut self, v: u64) {
        self.expiryDate = ::std::option::Option::Some(v);
    }

    // optional bytes keyBytes = 3;


    pub fn get_keyBytes(&self) -> &[u8] {
        match self.keyBytes.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_keyBytes(&mut self) {
        self.keyBytes.clear();
    }

    pub fn has_keyBytes(&self) -> bool {
        self.keyBytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keyBytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.keyBytes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keyBytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.keyBytes.is_none() {
            self.keyBytes.set_default();
        }
        self.keyBytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_keyBytes(&mut self) -> ::std::vec::Vec<u8> {
        self.keyBytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BlockKeyProto {
    fn is_initialized(&self) -> bool {
        if self.keyId.is_none() {
            return false;
        }
        if self.expiryDate.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.keyId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.expiryDate = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.keyBytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.keyId {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.expiryDate {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.keyBytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.keyId {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.expiryDate {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.keyBytes.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockKeyProto {
        BlockKeyProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "keyId",
                |m: &BlockKeyProto| { &m.keyId },
                |m: &mut BlockKeyProto| { &mut m.keyId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "expiryDate",
                |m: &BlockKeyProto| { &m.expiryDate },
                |m: &mut BlockKeyProto| { &mut m.expiryDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "keyBytes",
                |m: &BlockKeyProto| { &m.keyBytes },
                |m: &mut BlockKeyProto| { &mut m.keyBytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockKeyProto>(
                "BlockKeyProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockKeyProto {
        static instance: ::protobuf::rt::LazyV2<BlockKeyProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockKeyProto::new)
    }
}

impl ::protobuf::Clear for BlockKeyProto {
    fn clear(&mut self) {
        self.keyId = ::std::option::Option::None;
        self.expiryDate = ::std::option::Option::None;
        self.keyBytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockKeyProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockKeyProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExportedBlockKeysProto {
    // message fields
    isBlockTokenEnabled: ::std::option::Option<bool>,
    keyUpdateInterval: ::std::option::Option<u64>,
    tokenLifeTime: ::std::option::Option<u64>,
    pub currentKey: ::protobuf::SingularPtrField<BlockKeyProto>,
    pub allKeys: ::protobuf::RepeatedField<BlockKeyProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExportedBlockKeysProto {
    fn default() -> &'a ExportedBlockKeysProto {
        <ExportedBlockKeysProto as ::protobuf::Message>::default_instance()
    }
}

impl ExportedBlockKeysProto {
    pub fn new() -> ExportedBlockKeysProto {
        ::std::default::Default::default()
    }

    // required bool isBlockTokenEnabled = 1;


    pub fn get_isBlockTokenEnabled(&self) -> bool {
        self.isBlockTokenEnabled.unwrap_or(false)
    }
    pub fn clear_isBlockTokenEnabled(&mut self) {
        self.isBlockTokenEnabled = ::std::option::Option::None;
    }

    pub fn has_isBlockTokenEnabled(&self) -> bool {
        self.isBlockTokenEnabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isBlockTokenEnabled(&mut self, v: bool) {
        self.isBlockTokenEnabled = ::std::option::Option::Some(v);
    }

    // required uint64 keyUpdateInterval = 2;


    pub fn get_keyUpdateInterval(&self) -> u64 {
        self.keyUpdateInterval.unwrap_or(0)
    }
    pub fn clear_keyUpdateInterval(&mut self) {
        self.keyUpdateInterval = ::std::option::Option::None;
    }

    pub fn has_keyUpdateInterval(&self) -> bool {
        self.keyUpdateInterval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keyUpdateInterval(&mut self, v: u64) {
        self.keyUpdateInterval = ::std::option::Option::Some(v);
    }

    // required uint64 tokenLifeTime = 3;


    pub fn get_tokenLifeTime(&self) -> u64 {
        self.tokenLifeTime.unwrap_or(0)
    }
    pub fn clear_tokenLifeTime(&mut self) {
        self.tokenLifeTime = ::std::option::Option::None;
    }

    pub fn has_tokenLifeTime(&self) -> bool {
        self.tokenLifeTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tokenLifeTime(&mut self, v: u64) {
        self.tokenLifeTime = ::std::option::Option::Some(v);
    }

    // required .hadoop.hdfs.BlockKeyProto currentKey = 4;


    pub fn get_currentKey(&self) -> &BlockKeyProto {
        self.currentKey.as_ref().unwrap_or_else(|| <BlockKeyProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_currentKey(&mut self) {
        self.currentKey.clear();
    }

    pub fn has_currentKey(&self) -> bool {
        self.currentKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currentKey(&mut self, v: BlockKeyProto) {
        self.currentKey = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currentKey(&mut self) -> &mut BlockKeyProto {
        if self.currentKey.is_none() {
            self.currentKey.set_default();
        }
        self.currentKey.as_mut().unwrap()
    }

    // Take field
    pub fn take_currentKey(&mut self) -> BlockKeyProto {
        self.currentKey.take().unwrap_or_else(|| BlockKeyProto::new())
    }

    // repeated .hadoop.hdfs.BlockKeyProto allKeys = 5;


    pub fn get_allKeys(&self) -> &[BlockKeyProto] {
        &self.allKeys
    }
    pub fn clear_allKeys(&mut self) {
        self.allKeys.clear();
    }

    // Param is passed by value, moved
    pub fn set_allKeys(&mut self, v: ::protobuf::RepeatedField<BlockKeyProto>) {
        self.allKeys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allKeys(&mut self) -> &mut ::protobuf::RepeatedField<BlockKeyProto> {
        &mut self.allKeys
    }

    // Take field
    pub fn take_allKeys(&mut self) -> ::protobuf::RepeatedField<BlockKeyProto> {
        ::std::mem::replace(&mut self.allKeys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExportedBlockKeysProto {
    fn is_initialized(&self) -> bool {
        if self.isBlockTokenEnabled.is_none() {
            return false;
        }
        if self.keyUpdateInterval.is_none() {
            return false;
        }
        if self.tokenLifeTime.is_none() {
            return false;
        }
        if self.currentKey.is_none() {
            return false;
        }
        for v in &self.currentKey {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.allKeys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isBlockTokenEnabled = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.keyUpdateInterval = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.tokenLifeTime = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.currentKey)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.allKeys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.isBlockTokenEnabled {
            my_size += 2;
        }
        if let Some(v) = self.keyUpdateInterval {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.tokenLifeTime {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.currentKey.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.allKeys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.isBlockTokenEnabled {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.keyUpdateInterval {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.tokenLifeTime {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.currentKey.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.allKeys {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExportedBlockKeysProto {
        ExportedBlockKeysProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isBlockTokenEnabled",
                |m: &ExportedBlockKeysProto| { &m.isBlockTokenEnabled },
                |m: &mut ExportedBlockKeysProto| { &mut m.isBlockTokenEnabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "keyUpdateInterval",
                |m: &ExportedBlockKeysProto| { &m.keyUpdateInterval },
                |m: &mut ExportedBlockKeysProto| { &mut m.keyUpdateInterval },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "tokenLifeTime",
                |m: &ExportedBlockKeysProto| { &m.tokenLifeTime },
                |m: &mut ExportedBlockKeysProto| { &mut m.tokenLifeTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockKeyProto>>(
                "currentKey",
                |m: &ExportedBlockKeysProto| { &m.currentKey },
                |m: &mut ExportedBlockKeysProto| { &mut m.currentKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockKeyProto>>(
                "allKeys",
                |m: &ExportedBlockKeysProto| { &m.allKeys },
                |m: &mut ExportedBlockKeysProto| { &mut m.allKeys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExportedBlockKeysProto>(
                "ExportedBlockKeysProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExportedBlockKeysProto {
        static instance: ::protobuf::rt::LazyV2<ExportedBlockKeysProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExportedBlockKeysProto::new)
    }
}

impl ::protobuf::Clear for ExportedBlockKeysProto {
    fn clear(&mut self) {
        self.isBlockTokenEnabled = ::std::option::Option::None;
        self.keyUpdateInterval = ::std::option::Option::None;
        self.tokenLifeTime = ::std::option::Option::None;
        self.currentKey.clear();
        self.allKeys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExportedBlockKeysProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExportedBlockKeysProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockWithLocationsProto {
    // message fields
    pub block: ::protobuf::SingularPtrField<super::hdfs::BlockProto>,
    pub datanodeUuids: ::protobuf::RepeatedField<::std::string::String>,
    pub storageUuids: ::protobuf::RepeatedField<::std::string::String>,
    pub storageTypes: ::std::vec::Vec<super::hdfs::StorageTypeProto>,
    indices: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    dataBlockNum: ::std::option::Option<u32>,
    cellSize: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockWithLocationsProto {
    fn default() -> &'a BlockWithLocationsProto {
        <BlockWithLocationsProto as ::protobuf::Message>::default_instance()
    }
}

impl BlockWithLocationsProto {
    pub fn new() -> BlockWithLocationsProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.BlockProto block = 1;


    pub fn get_block(&self) -> &super::hdfs::BlockProto {
        self.block.as_ref().unwrap_or_else(|| <super::hdfs::BlockProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::hdfs::BlockProto) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::hdfs::BlockProto {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::hdfs::BlockProto {
        self.block.take().unwrap_or_else(|| super::hdfs::BlockProto::new())
    }

    // repeated string datanodeUuids = 2;


    pub fn get_datanodeUuids(&self) -> &[::std::string::String] {
        &self.datanodeUuids
    }
    pub fn clear_datanodeUuids(&mut self) {
        self.datanodeUuids.clear();
    }

    // Param is passed by value, moved
    pub fn set_datanodeUuids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.datanodeUuids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_datanodeUuids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.datanodeUuids
    }

    // Take field
    pub fn take_datanodeUuids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.datanodeUuids, ::protobuf::RepeatedField::new())
    }

    // repeated string storageUuids = 3;


    pub fn get_storageUuids(&self) -> &[::std::string::String] {
        &self.storageUuids
    }
    pub fn clear_storageUuids(&mut self) {
        self.storageUuids.clear();
    }

    // Param is passed by value, moved
    pub fn set_storageUuids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.storageUuids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_storageUuids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.storageUuids
    }

    // Take field
    pub fn take_storageUuids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.storageUuids, ::protobuf::RepeatedField::new())
    }

    // repeated .hadoop.hdfs.StorageTypeProto storageTypes = 4;


    pub fn get_storageTypes(&self) -> &[super::hdfs::StorageTypeProto] {
        &self.storageTypes
    }
    pub fn clear_storageTypes(&mut self) {
        self.storageTypes.clear();
    }

    // Param is passed by value, moved
    pub fn set_storageTypes(&mut self, v: ::std::vec::Vec<super::hdfs::StorageTypeProto>) {
        self.storageTypes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_storageTypes(&mut self) -> &mut ::std::vec::Vec<super::hdfs::StorageTypeProto> {
        &mut self.storageTypes
    }

    // Take field
    pub fn take_storageTypes(&mut self) -> ::std::vec::Vec<super::hdfs::StorageTypeProto> {
        ::std::mem::replace(&mut self.storageTypes, ::std::vec::Vec::new())
    }

    // optional bytes indices = 5;


    pub fn get_indices(&self) -> &[u8] {
        match self.indices.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_indices(&mut self) {
        self.indices.clear();
    }

    pub fn has_indices(&self) -> bool {
        self.indices.is_some()
    }

    // Param is passed by value, moved
    pub fn set_indices(&mut self, v: ::std::vec::Vec<u8>) {
        self.indices = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_indices(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.indices.is_none() {
            self.indices.set_default();
        }
        self.indices.as_mut().unwrap()
    }

    // Take field
    pub fn take_indices(&mut self) -> ::std::vec::Vec<u8> {
        self.indices.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 dataBlockNum = 6;


    pub fn get_dataBlockNum(&self) -> u32 {
        self.dataBlockNum.unwrap_or(0)
    }
    pub fn clear_dataBlockNum(&mut self) {
        self.dataBlockNum = ::std::option::Option::None;
    }

    pub fn has_dataBlockNum(&self) -> bool {
        self.dataBlockNum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dataBlockNum(&mut self, v: u32) {
        self.dataBlockNum = ::std::option::Option::Some(v);
    }

    // optional uint32 cellSize = 7;


    pub fn get_cellSize(&self) -> u32 {
        self.cellSize.unwrap_or(0)
    }
    pub fn clear_cellSize(&mut self) {
        self.cellSize = ::std::option::Option::None;
    }

    pub fn has_cellSize(&self) -> bool {
        self.cellSize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cellSize(&mut self, v: u32) {
        self.cellSize = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for BlockWithLocationsProto {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        }
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.datanodeUuids)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.storageUuids)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.storageTypes, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.indices)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dataBlockNum = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cellSize = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.datanodeUuids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.storageUuids {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.storageTypes {
            my_size += ::protobuf::rt::enum_size(4, *value);
        };
        if let Some(ref v) = self.indices.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(v) = self.dataBlockNum {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.cellSize {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.datanodeUuids {
            os.write_string(2, &v)?;
        };
        for v in &self.storageUuids {
            os.write_string(3, &v)?;
        };
        for v in &self.storageTypes {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(v))?;
        };
        if let Some(ref v) = self.indices.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(v) = self.dataBlockNum {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.cellSize {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockWithLocationsProto {
        BlockWithLocationsProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::BlockProto>>(
                "block",
                |m: &BlockWithLocationsProto| { &m.block },
                |m: &mut BlockWithLocationsProto| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "datanodeUuids",
                |m: &BlockWithLocationsProto| { &m.datanodeUuids },
                |m: &mut BlockWithLocationsProto| { &mut m.datanodeUuids },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "storageUuids",
                |m: &BlockWithLocationsProto| { &m.storageUuids },
                |m: &mut BlockWithLocationsProto| { &mut m.storageUuids },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::hdfs::StorageTypeProto>>(
                "storageTypes",
                |m: &BlockWithLocationsProto| { &m.storageTypes },
                |m: &mut BlockWithLocationsProto| { &mut m.storageTypes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "indices",
                |m: &BlockWithLocationsProto| { &m.indices },
                |m: &mut BlockWithLocationsProto| { &mut m.indices },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dataBlockNum",
                |m: &BlockWithLocationsProto| { &m.dataBlockNum },
                |m: &mut BlockWithLocationsProto| { &mut m.dataBlockNum },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cellSize",
                |m: &BlockWithLocationsProto| { &m.cellSize },
                |m: &mut BlockWithLocationsProto| { &mut m.cellSize },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockWithLocationsProto>(
                "BlockWithLocationsProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockWithLocationsProto {
        static instance: ::protobuf::rt::LazyV2<BlockWithLocationsProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockWithLocationsProto::new)
    }
}

impl ::protobuf::Clear for BlockWithLocationsProto {
    fn clear(&mut self) {
        self.block.clear();
        self.datanodeUuids.clear();
        self.storageUuids.clear();
        self.storageTypes.clear();
        self.indices.clear();
        self.dataBlockNum = ::std::option::Option::None;
        self.cellSize = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockWithLocationsProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockWithLocationsProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlocksWithLocationsProto {
    // message fields
    pub blocks: ::protobuf::RepeatedField<BlockWithLocationsProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlocksWithLocationsProto {
    fn default() -> &'a BlocksWithLocationsProto {
        <BlocksWithLocationsProto as ::protobuf::Message>::default_instance()
    }
}

impl BlocksWithLocationsProto {
    pub fn new() -> BlocksWithLocationsProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.BlockWithLocationsProto blocks = 1;


    pub fn get_blocks(&self) -> &[BlockWithLocationsProto] {
        &self.blocks
    }
    pub fn clear_blocks(&mut self) {
        self.blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks(&mut self, v: ::protobuf::RepeatedField<BlockWithLocationsProto>) {
        self.blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blocks(&mut self) -> &mut ::protobuf::RepeatedField<BlockWithLocationsProto> {
        &mut self.blocks
    }

    // Take field
    pub fn take_blocks(&mut self) -> ::protobuf::RepeatedField<BlockWithLocationsProto> {
        ::std::mem::replace(&mut self.blocks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BlocksWithLocationsProto {
    fn is_initialized(&self) -> bool {
        for v in &self.blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blocks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.blocks {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlocksWithLocationsProto {
        BlocksWithLocationsProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockWithLocationsProto>>(
                "blocks",
                |m: &BlocksWithLocationsProto| { &m.blocks },
                |m: &mut BlocksWithLocationsProto| { &mut m.blocks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlocksWithLocationsProto>(
                "BlocksWithLocationsProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlocksWithLocationsProto {
        static instance: ::protobuf::rt::LazyV2<BlocksWithLocationsProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlocksWithLocationsProto::new)
    }
}

impl ::protobuf::Clear for BlocksWithLocationsProto {
    fn clear(&mut self) {
        self.blocks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlocksWithLocationsProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlocksWithLocationsProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteEditLogProto {
    // message fields
    startTxId: ::std::option::Option<u64>,
    endTxId: ::std::option::Option<u64>,
    isInProgress: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteEditLogProto {
    fn default() -> &'a RemoteEditLogProto {
        <RemoteEditLogProto as ::protobuf::Message>::default_instance()
    }
}

impl RemoteEditLogProto {
    pub fn new() -> RemoteEditLogProto {
        ::std::default::Default::default()
    }

    // required uint64 startTxId = 1;


    pub fn get_startTxId(&self) -> u64 {
        self.startTxId.unwrap_or(0)
    }
    pub fn clear_startTxId(&mut self) {
        self.startTxId = ::std::option::Option::None;
    }

    pub fn has_startTxId(&self) -> bool {
        self.startTxId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startTxId(&mut self, v: u64) {
        self.startTxId = ::std::option::Option::Some(v);
    }

    // required uint64 endTxId = 2;


    pub fn get_endTxId(&self) -> u64 {
        self.endTxId.unwrap_or(0)
    }
    pub fn clear_endTxId(&mut self) {
        self.endTxId = ::std::option::Option::None;
    }

    pub fn has_endTxId(&self) -> bool {
        self.endTxId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endTxId(&mut self, v: u64) {
        self.endTxId = ::std::option::Option::Some(v);
    }

    // optional bool isInProgress = 3;


    pub fn get_isInProgress(&self) -> bool {
        self.isInProgress.unwrap_or(false)
    }
    pub fn clear_isInProgress(&mut self) {
        self.isInProgress = ::std::option::Option::None;
    }

    pub fn has_isInProgress(&self) -> bool {
        self.isInProgress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isInProgress(&mut self, v: bool) {
        self.isInProgress = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RemoteEditLogProto {
    fn is_initialized(&self) -> bool {
        if self.startTxId.is_none() {
            return false;
        }
        if self.endTxId.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.startTxId = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.endTxId = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isInProgress = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.startTxId {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.endTxId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.isInProgress {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.startTxId {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.endTxId {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.isInProgress {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteEditLogProto {
        RemoteEditLogProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "startTxId",
                |m: &RemoteEditLogProto| { &m.startTxId },
                |m: &mut RemoteEditLogProto| { &mut m.startTxId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "endTxId",
                |m: &RemoteEditLogProto| { &m.endTxId },
                |m: &mut RemoteEditLogProto| { &mut m.endTxId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isInProgress",
                |m: &RemoteEditLogProto| { &m.isInProgress },
                |m: &mut RemoteEditLogProto| { &mut m.isInProgress },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoteEditLogProto>(
                "RemoteEditLogProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoteEditLogProto {
        static instance: ::protobuf::rt::LazyV2<RemoteEditLogProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoteEditLogProto::new)
    }
}

impl ::protobuf::Clear for RemoteEditLogProto {
    fn clear(&mut self) {
        self.startTxId = ::std::option::Option::None;
        self.endTxId = ::std::option::Option::None;
        self.isInProgress = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteEditLogProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteEditLogProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteEditLogManifestProto {
    // message fields
    pub logs: ::protobuf::RepeatedField<RemoteEditLogProto>,
    committedTxnId: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteEditLogManifestProto {
    fn default() -> &'a RemoteEditLogManifestProto {
        <RemoteEditLogManifestProto as ::protobuf::Message>::default_instance()
    }
}

impl RemoteEditLogManifestProto {
    pub fn new() -> RemoteEditLogManifestProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.RemoteEditLogProto logs = 1;


    pub fn get_logs(&self) -> &[RemoteEditLogProto] {
        &self.logs
    }
    pub fn clear_logs(&mut self) {
        self.logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: ::protobuf::RepeatedField<RemoteEditLogProto>) {
        self.logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut ::protobuf::RepeatedField<RemoteEditLogProto> {
        &mut self.logs
    }

    // Take field
    pub fn take_logs(&mut self) -> ::protobuf::RepeatedField<RemoteEditLogProto> {
        ::std::mem::replace(&mut self.logs, ::protobuf::RepeatedField::new())
    }

    // optional uint64 committedTxnId = 2;


    pub fn get_committedTxnId(&self) -> u64 {
        self.committedTxnId.unwrap_or(0)
    }
    pub fn clear_committedTxnId(&mut self) {
        self.committedTxnId = ::std::option::Option::None;
    }

    pub fn has_committedTxnId(&self) -> bool {
        self.committedTxnId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_committedTxnId(&mut self, v: u64) {
        self.committedTxnId = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RemoteEditLogManifestProto {
    fn is_initialized(&self) -> bool {
        for v in &self.logs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.logs)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.committedTxnId = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.committedTxnId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.logs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.committedTxnId {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteEditLogManifestProto {
        RemoteEditLogManifestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteEditLogProto>>(
                "logs",
                |m: &RemoteEditLogManifestProto| { &m.logs },
                |m: &mut RemoteEditLogManifestProto| { &mut m.logs },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "committedTxnId",
                |m: &RemoteEditLogManifestProto| { &m.committedTxnId },
                |m: &mut RemoteEditLogManifestProto| { &mut m.committedTxnId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoteEditLogManifestProto>(
                "RemoteEditLogManifestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoteEditLogManifestProto {
        static instance: ::protobuf::rt::LazyV2<RemoteEditLogManifestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoteEditLogManifestProto::new)
    }
}

impl ::protobuf::Clear for RemoteEditLogManifestProto {
    fn clear(&mut self) {
        self.logs.clear();
        self.committedTxnId = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteEditLogManifestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteEditLogManifestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NamespaceInfoProto {
    // message fields
    buildVersion: ::protobuf::SingularField<::std::string::String>,
    unused: ::std::option::Option<u32>,
    blockPoolID: ::protobuf::SingularField<::std::string::String>,
    pub storageInfo: ::protobuf::SingularPtrField<StorageInfoProto>,
    softwareVersion: ::protobuf::SingularField<::std::string::String>,
    capabilities: ::std::option::Option<u64>,
    state: ::std::option::Option<NNHAStatusHeartbeatProto_State>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NamespaceInfoProto {
    fn default() -> &'a NamespaceInfoProto {
        <NamespaceInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl NamespaceInfoProto {
    pub fn new() -> NamespaceInfoProto {
        ::std::default::Default::default()
    }

    // required string buildVersion = 1;


    pub fn get_buildVersion(&self) -> &str {
        match self.buildVersion.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_buildVersion(&mut self) {
        self.buildVersion.clear();
    }

    pub fn has_buildVersion(&self) -> bool {
        self.buildVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buildVersion(&mut self, v: ::std::string::String) {
        self.buildVersion = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buildVersion(&mut self) -> &mut ::std::string::String {
        if self.buildVersion.is_none() {
            self.buildVersion.set_default();
        }
        self.buildVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_buildVersion(&mut self) -> ::std::string::String {
        self.buildVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 unused = 2;


    pub fn get_unused(&self) -> u32 {
        self.unused.unwrap_or(0)
    }
    pub fn clear_unused(&mut self) {
        self.unused = ::std::option::Option::None;
    }

    pub fn has_unused(&self) -> bool {
        self.unused.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unused(&mut self, v: u32) {
        self.unused = ::std::option::Option::Some(v);
    }

    // required string blockPoolID = 3;


    pub fn get_blockPoolID(&self) -> &str {
        match self.blockPoolID.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_blockPoolID(&mut self) {
        self.blockPoolID.clear();
    }

    pub fn has_blockPoolID(&self) -> bool {
        self.blockPoolID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blockPoolID(&mut self, v: ::std::string::String) {
        self.blockPoolID = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blockPoolID(&mut self) -> &mut ::std::string::String {
        if self.blockPoolID.is_none() {
            self.blockPoolID.set_default();
        }
        self.blockPoolID.as_mut().unwrap()
    }

    // Take field
    pub fn take_blockPoolID(&mut self) -> ::std::string::String {
        self.blockPoolID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .hadoop.hdfs.StorageInfoProto storageInfo = 4;


    pub fn get_storageInfo(&self) -> &StorageInfoProto {
        self.storageInfo.as_ref().unwrap_or_else(|| <StorageInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_storageInfo(&mut self) {
        self.storageInfo.clear();
    }

    pub fn has_storageInfo(&self) -> bool {
        self.storageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storageInfo(&mut self, v: StorageInfoProto) {
        self.storageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storageInfo(&mut self) -> &mut StorageInfoProto {
        if self.storageInfo.is_none() {
            self.storageInfo.set_default();
        }
        self.storageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_storageInfo(&mut self) -> StorageInfoProto {
        self.storageInfo.take().unwrap_or_else(|| StorageInfoProto::new())
    }

    // required string softwareVersion = 5;


    pub fn get_softwareVersion(&self) -> &str {
        match self.softwareVersion.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_softwareVersion(&mut self) {
        self.softwareVersion.clear();
    }

    pub fn has_softwareVersion(&self) -> bool {
        self.softwareVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_softwareVersion(&mut self, v: ::std::string::String) {
        self.softwareVersion = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_softwareVersion(&mut self) -> &mut ::std::string::String {
        if self.softwareVersion.is_none() {
            self.softwareVersion.set_default();
        }
        self.softwareVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_softwareVersion(&mut self) -> ::std::string::String {
        self.softwareVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 capabilities = 6;


    pub fn get_capabilities(&self) -> u64 {
        self.capabilities.unwrap_or(0u64)
    }
    pub fn clear_capabilities(&mut self) {
        self.capabilities = ::std::option::Option::None;
    }

    pub fn has_capabilities(&self) -> bool {
        self.capabilities.is_some()
    }

    // Param is passed by value, moved
    pub fn set_capabilities(&mut self, v: u64) {
        self.capabilities = ::std::option::Option::Some(v);
    }

    // optional .hadoop.hdfs.NNHAStatusHeartbeatProto.State state = 7;


    pub fn get_state(&self) -> NNHAStatusHeartbeatProto_State {
        self.state.unwrap_or(NNHAStatusHeartbeatProto_State::ACTIVE)
    }
    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: NNHAStatusHeartbeatProto_State) {
        self.state = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for NamespaceInfoProto {
    fn is_initialized(&self) -> bool {
        if self.buildVersion.is_none() {
            return false;
        }
        if self.unused.is_none() {
            return false;
        }
        if self.blockPoolID.is_none() {
            return false;
        }
        if self.storageInfo.is_none() {
            return false;
        }
        if self.softwareVersion.is_none() {
            return false;
        }
        for v in &self.storageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.buildVersion)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.unused = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.blockPoolID)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storageInfo)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.softwareVersion)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.capabilities = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.buildVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.unused {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.blockPoolID.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.storageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.softwareVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.capabilities {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.buildVersion.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.unused {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.blockPoolID.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.storageInfo.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.softwareVersion.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.capabilities {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NamespaceInfoProto {
        NamespaceInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buildVersion",
                |m: &NamespaceInfoProto| { &m.buildVersion },
                |m: &mut NamespaceInfoProto| { &mut m.buildVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "unused",
                |m: &NamespaceInfoProto| { &m.unused },
                |m: &mut NamespaceInfoProto| { &mut m.unused },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "blockPoolID",
                |m: &NamespaceInfoProto| { &m.blockPoolID },
                |m: &mut NamespaceInfoProto| { &mut m.blockPoolID },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StorageInfoProto>>(
                "storageInfo",
                |m: &NamespaceInfoProto| { &m.storageInfo },
                |m: &mut NamespaceInfoProto| { &mut m.storageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "softwareVersion",
                |m: &NamespaceInfoProto| { &m.softwareVersion },
                |m: &mut NamespaceInfoProto| { &mut m.softwareVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "capabilities",
                |m: &NamespaceInfoProto| { &m.capabilities },
                |m: &mut NamespaceInfoProto| { &mut m.capabilities },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NNHAStatusHeartbeatProto_State>>(
                "state",
                |m: &NamespaceInfoProto| { &m.state },
                |m: &mut NamespaceInfoProto| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NamespaceInfoProto>(
                "NamespaceInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NamespaceInfoProto {
        static instance: ::protobuf::rt::LazyV2<NamespaceInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NamespaceInfoProto::new)
    }
}

impl ::protobuf::Clear for NamespaceInfoProto {
    fn clear(&mut self) {
        self.buildVersion.clear();
        self.unused = ::std::option::Option::None;
        self.blockPoolID.clear();
        self.storageInfo.clear();
        self.softwareVersion.clear();
        self.capabilities = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NamespaceInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NamespaceInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RecoveringBlockProto {
    // message fields
    newGenStamp: ::std::option::Option<u64>,
    pub block: ::protobuf::SingularPtrField<super::hdfs::LocatedBlockProto>,
    pub truncateBlock: ::protobuf::SingularPtrField<super::hdfs::BlockProto>,
    pub ecPolicy: ::protobuf::SingularPtrField<super::hdfs::ErasureCodingPolicyProto>,
    blockIndices: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecoveringBlockProto {
    fn default() -> &'a RecoveringBlockProto {
        <RecoveringBlockProto as ::protobuf::Message>::default_instance()
    }
}

impl RecoveringBlockProto {
    pub fn new() -> RecoveringBlockProto {
        ::std::default::Default::default()
    }

    // required uint64 newGenStamp = 1;


    pub fn get_newGenStamp(&self) -> u64 {
        self.newGenStamp.unwrap_or(0)
    }
    pub fn clear_newGenStamp(&mut self) {
        self.newGenStamp = ::std::option::Option::None;
    }

    pub fn has_newGenStamp(&self) -> bool {
        self.newGenStamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_newGenStamp(&mut self, v: u64) {
        self.newGenStamp = ::std::option::Option::Some(v);
    }

    // required .hadoop.hdfs.LocatedBlockProto block = 2;


    pub fn get_block(&self) -> &super::hdfs::LocatedBlockProto {
        self.block.as_ref().unwrap_or_else(|| <super::hdfs::LocatedBlockProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::hdfs::LocatedBlockProto) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::hdfs::LocatedBlockProto {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::hdfs::LocatedBlockProto {
        self.block.take().unwrap_or_else(|| super::hdfs::LocatedBlockProto::new())
    }

    // optional .hadoop.hdfs.BlockProto truncateBlock = 3;


    pub fn get_truncateBlock(&self) -> &super::hdfs::BlockProto {
        self.truncateBlock.as_ref().unwrap_or_else(|| <super::hdfs::BlockProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_truncateBlock(&mut self) {
        self.truncateBlock.clear();
    }

    pub fn has_truncateBlock(&self) -> bool {
        self.truncateBlock.is_some()
    }

    // Param is passed by value, moved
    pub fn set_truncateBlock(&mut self, v: super::hdfs::BlockProto) {
        self.truncateBlock = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_truncateBlock(&mut self) -> &mut super::hdfs::BlockProto {
        if self.truncateBlock.is_none() {
            self.truncateBlock.set_default();
        }
        self.truncateBlock.as_mut().unwrap()
    }

    // Take field
    pub fn take_truncateBlock(&mut self) -> super::hdfs::BlockProto {
        self.truncateBlock.take().unwrap_or_else(|| super::hdfs::BlockProto::new())
    }

    // optional .hadoop.hdfs.ErasureCodingPolicyProto ecPolicy = 4;


    pub fn get_ecPolicy(&self) -> &super::hdfs::ErasureCodingPolicyProto {
        self.ecPolicy.as_ref().unwrap_or_else(|| <super::hdfs::ErasureCodingPolicyProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ecPolicy(&mut self) {
        self.ecPolicy.clear();
    }

    pub fn has_ecPolicy(&self) -> bool {
        self.ecPolicy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecPolicy(&mut self, v: super::hdfs::ErasureCodingPolicyProto) {
        self.ecPolicy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ecPolicy(&mut self) -> &mut super::hdfs::ErasureCodingPolicyProto {
        if self.ecPolicy.is_none() {
            self.ecPolicy.set_default();
        }
        self.ecPolicy.as_mut().unwrap()
    }

    // Take field
    pub fn take_ecPolicy(&mut self) -> super::hdfs::ErasureCodingPolicyProto {
        self.ecPolicy.take().unwrap_or_else(|| super::hdfs::ErasureCodingPolicyProto::new())
    }

    // optional bytes blockIndices = 5;


    pub fn get_blockIndices(&self) -> &[u8] {
        match self.blockIndices.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_blockIndices(&mut self) {
        self.blockIndices.clear();
    }

    pub fn has_blockIndices(&self) -> bool {
        self.blockIndices.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blockIndices(&mut self, v: ::std::vec::Vec<u8>) {
        self.blockIndices = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blockIndices(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.blockIndices.is_none() {
            self.blockIndices.set_default();
        }
        self.blockIndices.as_mut().unwrap()
    }

    // Take field
    pub fn take_blockIndices(&mut self) -> ::std::vec::Vec<u8> {
        self.blockIndices.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RecoveringBlockProto {
    fn is_initialized(&self) -> bool {
        if self.newGenStamp.is_none() {
            return false;
        }
        if self.block.is_none() {
            return false;
        }
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.truncateBlock {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ecPolicy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.newGenStamp = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.truncateBlock)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ecPolicy)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.blockIndices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.newGenStamp {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.truncateBlock.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ecPolicy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.blockIndices.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.newGenStamp {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.truncateBlock.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ecPolicy.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.blockIndices.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecoveringBlockProto {
        RecoveringBlockProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "newGenStamp",
                |m: &RecoveringBlockProto| { &m.newGenStamp },
                |m: &mut RecoveringBlockProto| { &mut m.newGenStamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::LocatedBlockProto>>(
                "block",
                |m: &RecoveringBlockProto| { &m.block },
                |m: &mut RecoveringBlockProto| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::BlockProto>>(
                "truncateBlock",
                |m: &RecoveringBlockProto| { &m.truncateBlock },
                |m: &mut RecoveringBlockProto| { &mut m.truncateBlock },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ErasureCodingPolicyProto>>(
                "ecPolicy",
                |m: &RecoveringBlockProto| { &m.ecPolicy },
                |m: &mut RecoveringBlockProto| { &mut m.ecPolicy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "blockIndices",
                |m: &RecoveringBlockProto| { &m.blockIndices },
                |m: &mut RecoveringBlockProto| { &mut m.blockIndices },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecoveringBlockProto>(
                "RecoveringBlockProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecoveringBlockProto {
        static instance: ::protobuf::rt::LazyV2<RecoveringBlockProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecoveringBlockProto::new)
    }
}

impl ::protobuf::Clear for RecoveringBlockProto {
    fn clear(&mut self) {
        self.newGenStamp = ::std::option::Option::None;
        self.block.clear();
        self.truncateBlock.clear();
        self.ecPolicy.clear();
        self.blockIndices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecoveringBlockProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecoveringBlockProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckpointSignatureProto {
    // message fields
    blockPoolId: ::protobuf::SingularField<::std::string::String>,
    mostRecentCheckpointTxId: ::std::option::Option<u64>,
    curSegmentTxId: ::std::option::Option<u64>,
    pub storageInfo: ::protobuf::SingularPtrField<StorageInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckpointSignatureProto {
    fn default() -> &'a CheckpointSignatureProto {
        <CheckpointSignatureProto as ::protobuf::Message>::default_instance()
    }
}

impl CheckpointSignatureProto {
    pub fn new() -> CheckpointSignatureProto {
        ::std::default::Default::default()
    }

    // required string blockPoolId = 1;


    pub fn get_blockPoolId(&self) -> &str {
        match self.blockPoolId.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_blockPoolId(&mut self) {
        self.blockPoolId.clear();
    }

    pub fn has_blockPoolId(&self) -> bool {
        self.blockPoolId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blockPoolId(&mut self, v: ::std::string::String) {
        self.blockPoolId = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blockPoolId(&mut self) -> &mut ::std::string::String {
        if self.blockPoolId.is_none() {
            self.blockPoolId.set_default();
        }
        self.blockPoolId.as_mut().unwrap()
    }

    // Take field
    pub fn take_blockPoolId(&mut self) -> ::std::string::String {
        self.blockPoolId.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 mostRecentCheckpointTxId = 2;


    pub fn get_mostRecentCheckpointTxId(&self) -> u64 {
        self.mostRecentCheckpointTxId.unwrap_or(0)
    }
    pub fn clear_mostRecentCheckpointTxId(&mut self) {
        self.mostRecentCheckpointTxId = ::std::option::Option::None;
    }

    pub fn has_mostRecentCheckpointTxId(&self) -> bool {
        self.mostRecentCheckpointTxId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mostRecentCheckpointTxId(&mut self, v: u64) {
        self.mostRecentCheckpointTxId = ::std::option::Option::Some(v);
    }

    // required uint64 curSegmentTxId = 3;


    pub fn get_curSegmentTxId(&self) -> u64 {
        self.curSegmentTxId.unwrap_or(0)
    }
    pub fn clear_curSegmentTxId(&mut self) {
        self.curSegmentTxId = ::std::option::Option::None;
    }

    pub fn has_curSegmentTxId(&self) -> bool {
        self.curSegmentTxId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_curSegmentTxId(&mut self, v: u64) {
        self.curSegmentTxId = ::std::option::Option::Some(v);
    }

    // required .hadoop.hdfs.StorageInfoProto storageInfo = 4;


    pub fn get_storageInfo(&self) -> &StorageInfoProto {
        self.storageInfo.as_ref().unwrap_or_else(|| <StorageInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_storageInfo(&mut self) {
        self.storageInfo.clear();
    }

    pub fn has_storageInfo(&self) -> bool {
        self.storageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storageInfo(&mut self, v: StorageInfoProto) {
        self.storageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storageInfo(&mut self) -> &mut StorageInfoProto {
        if self.storageInfo.is_none() {
            self.storageInfo.set_default();
        }
        self.storageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_storageInfo(&mut self) -> StorageInfoProto {
        self.storageInfo.take().unwrap_or_else(|| StorageInfoProto::new())
    }
}

impl ::protobuf::Message for CheckpointSignatureProto {
    fn is_initialized(&self) -> bool {
        if self.blockPoolId.is_none() {
            return false;
        }
        if self.mostRecentCheckpointTxId.is_none() {
            return false;
        }
        if self.curSegmentTxId.is_none() {
            return false;
        }
        if self.storageInfo.is_none() {
            return false;
        }
        for v in &self.storageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.blockPoolId)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.mostRecentCheckpointTxId = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.curSegmentTxId = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storageInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.blockPoolId.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.mostRecentCheckpointTxId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.curSegmentTxId {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.storageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.blockPoolId.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.mostRecentCheckpointTxId {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.curSegmentTxId {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.storageInfo.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckpointSignatureProto {
        CheckpointSignatureProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "blockPoolId",
                |m: &CheckpointSignatureProto| { &m.blockPoolId },
                |m: &mut CheckpointSignatureProto| { &mut m.blockPoolId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "mostRecentCheckpointTxId",
                |m: &CheckpointSignatureProto| { &m.mostRecentCheckpointTxId },
                |m: &mut CheckpointSignatureProto| { &mut m.mostRecentCheckpointTxId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "curSegmentTxId",
                |m: &CheckpointSignatureProto| { &m.curSegmentTxId },
                |m: &mut CheckpointSignatureProto| { &mut m.curSegmentTxId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StorageInfoProto>>(
                "storageInfo",
                |m: &CheckpointSignatureProto| { &m.storageInfo },
                |m: &mut CheckpointSignatureProto| { &mut m.storageInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckpointSignatureProto>(
                "CheckpointSignatureProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckpointSignatureProto {
        static instance: ::protobuf::rt::LazyV2<CheckpointSignatureProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckpointSignatureProto::new)
    }
}

impl ::protobuf::Clear for CheckpointSignatureProto {
    fn clear(&mut self) {
        self.blockPoolId.clear();
        self.mostRecentCheckpointTxId = ::std::option::Option::None;
        self.curSegmentTxId = ::std::option::Option::None;
        self.storageInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckpointSignatureProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckpointSignatureProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckpointCommandProto {
    // message fields
    pub signature: ::protobuf::SingularPtrField<CheckpointSignatureProto>,
    needToReturnImage: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckpointCommandProto {
    fn default() -> &'a CheckpointCommandProto {
        <CheckpointCommandProto as ::protobuf::Message>::default_instance()
    }
}

impl CheckpointCommandProto {
    pub fn new() -> CheckpointCommandProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.CheckpointSignatureProto signature = 1;


    pub fn get_signature(&self) -> &CheckpointSignatureProto {
        self.signature.as_ref().unwrap_or_else(|| <CheckpointSignatureProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: CheckpointSignatureProto) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut CheckpointSignatureProto {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> CheckpointSignatureProto {
        self.signature.take().unwrap_or_else(|| CheckpointSignatureProto::new())
    }

    // required bool needToReturnImage = 2;


    pub fn get_needToReturnImage(&self) -> bool {
        self.needToReturnImage.unwrap_or(false)
    }
    pub fn clear_needToReturnImage(&mut self) {
        self.needToReturnImage = ::std::option::Option::None;
    }

    pub fn has_needToReturnImage(&self) -> bool {
        self.needToReturnImage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_needToReturnImage(&mut self, v: bool) {
        self.needToReturnImage = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CheckpointCommandProto {
    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        if self.needToReturnImage.is_none() {
            return false;
        }
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.needToReturnImage = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.needToReturnImage {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.needToReturnImage {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckpointCommandProto {
        CheckpointCommandProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CheckpointSignatureProto>>(
                "signature",
                |m: &CheckpointCommandProto| { &m.signature },
                |m: &mut CheckpointCommandProto| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "needToReturnImage",
                |m: &CheckpointCommandProto| { &m.needToReturnImage },
                |m: &mut CheckpointCommandProto| { &mut m.needToReturnImage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckpointCommandProto>(
                "CheckpointCommandProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckpointCommandProto {
        static instance: ::protobuf::rt::LazyV2<CheckpointCommandProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckpointCommandProto::new)
    }
}

impl ::protobuf::Clear for CheckpointCommandProto {
    fn clear(&mut self) {
        self.signature.clear();
        self.needToReturnImage = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckpointCommandProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckpointCommandProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NamenodeCommandProto {
    // message fields
    action: ::std::option::Option<u32>,
    field_type: ::std::option::Option<NamenodeCommandProto_Type>,
    pub checkpointCmd: ::protobuf::SingularPtrField<CheckpointCommandProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NamenodeCommandProto {
    fn default() -> &'a NamenodeCommandProto {
        <NamenodeCommandProto as ::protobuf::Message>::default_instance()
    }
}

impl NamenodeCommandProto {
    pub fn new() -> NamenodeCommandProto {
        ::std::default::Default::default()
    }

    // required uint32 action = 1;


    pub fn get_action(&self) -> u32 {
        self.action.unwrap_or(0)
    }
    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: u32) {
        self.action = ::std::option::Option::Some(v);
    }

    // required .hadoop.hdfs.NamenodeCommandProto.Type type = 2;


    pub fn get_field_type(&self) -> NamenodeCommandProto_Type {
        self.field_type.unwrap_or(NamenodeCommandProto_Type::NamenodeCommand)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: NamenodeCommandProto_Type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional .hadoop.hdfs.CheckpointCommandProto checkpointCmd = 3;


    pub fn get_checkpointCmd(&self) -> &CheckpointCommandProto {
        self.checkpointCmd.as_ref().unwrap_or_else(|| <CheckpointCommandProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_checkpointCmd(&mut self) {
        self.checkpointCmd.clear();
    }

    pub fn has_checkpointCmd(&self) -> bool {
        self.checkpointCmd.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checkpointCmd(&mut self, v: CheckpointCommandProto) {
        self.checkpointCmd = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checkpointCmd(&mut self) -> &mut CheckpointCommandProto {
        if self.checkpointCmd.is_none() {
            self.checkpointCmd.set_default();
        }
        self.checkpointCmd.as_mut().unwrap()
    }

    // Take field
    pub fn take_checkpointCmd(&mut self) -> CheckpointCommandProto {
        self.checkpointCmd.take().unwrap_or_else(|| CheckpointCommandProto::new())
    }
}

impl ::protobuf::Message for NamenodeCommandProto {
    fn is_initialized(&self) -> bool {
        if self.action.is_none() {
            return false;
        }
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.checkpointCmd {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.action = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.checkpointCmd)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.checkpointCmd.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.action {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.checkpointCmd.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NamenodeCommandProto {
        NamenodeCommandProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "action",
                |m: &NamenodeCommandProto| { &m.action },
                |m: &mut NamenodeCommandProto| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NamenodeCommandProto_Type>>(
                "type",
                |m: &NamenodeCommandProto| { &m.field_type },
                |m: &mut NamenodeCommandProto| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CheckpointCommandProto>>(
                "checkpointCmd",
                |m: &NamenodeCommandProto| { &m.checkpointCmd },
                |m: &mut NamenodeCommandProto| { &mut m.checkpointCmd },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NamenodeCommandProto>(
                "NamenodeCommandProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NamenodeCommandProto {
        static instance: ::protobuf::rt::LazyV2<NamenodeCommandProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NamenodeCommandProto::new)
    }
}

impl ::protobuf::Clear for NamenodeCommandProto {
    fn clear(&mut self) {
        self.action = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.checkpointCmd.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NamenodeCommandProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NamenodeCommandProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NamenodeCommandProto_Type {
    NamenodeCommand = 0,
    CheckPointCommand = 1,
}

impl ::protobuf::ProtobufEnum for NamenodeCommandProto_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NamenodeCommandProto_Type> {
        match value {
            0 => ::std::option::Option::Some(NamenodeCommandProto_Type::NamenodeCommand),
            1 => ::std::option::Option::Some(NamenodeCommandProto_Type::CheckPointCommand),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NamenodeCommandProto_Type] = &[
            NamenodeCommandProto_Type::NamenodeCommand,
            NamenodeCommandProto_Type::CheckPointCommand,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<NamenodeCommandProto_Type>("NamenodeCommandProto.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for NamenodeCommandProto_Type {
}

impl ::std::default::Default for NamenodeCommandProto_Type {
    fn default() -> Self {
        NamenodeCommandProto_Type::NamenodeCommand
    }
}

impl ::protobuf::reflect::ProtobufValue for NamenodeCommandProto_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VersionRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VersionRequestProto {
    fn default() -> &'a VersionRequestProto {
        <VersionRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl VersionRequestProto {
    pub fn new() -> VersionRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for VersionRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VersionRequestProto {
        VersionRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VersionRequestProto>(
                "VersionRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VersionRequestProto {
        static instance: ::protobuf::rt::LazyV2<VersionRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VersionRequestProto::new)
    }
}

impl ::protobuf::Clear for VersionRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VersionRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VersionResponseProto {
    // message fields
    pub info: ::protobuf::SingularPtrField<NamespaceInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VersionResponseProto {
    fn default() -> &'a VersionResponseProto {
        <VersionResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl VersionResponseProto {
    pub fn new() -> VersionResponseProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.NamespaceInfoProto info = 1;


    pub fn get_info(&self) -> &NamespaceInfoProto {
        self.info.as_ref().unwrap_or_else(|| <NamespaceInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: NamespaceInfoProto) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut NamespaceInfoProto {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> NamespaceInfoProto {
        self.info.take().unwrap_or_else(|| NamespaceInfoProto::new())
    }
}

impl ::protobuf::Message for VersionResponseProto {
    fn is_initialized(&self) -> bool {
        if self.info.is_none() {
            return false;
        }
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VersionResponseProto {
        VersionResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NamespaceInfoProto>>(
                "info",
                |m: &VersionResponseProto| { &m.info },
                |m: &mut VersionResponseProto| { &mut m.info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VersionResponseProto>(
                "VersionResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VersionResponseProto {
        static instance: ::protobuf::rt::LazyV2<VersionResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VersionResponseProto::new)
    }
}

impl ::protobuf::Clear for VersionResponseProto {
    fn clear(&mut self) {
        self.info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VersionResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageInfoProto {
    // message fields
    layoutVersion: ::std::option::Option<u32>,
    namespceID: ::std::option::Option<u32>,
    clusterID: ::protobuf::SingularField<::std::string::String>,
    cTime: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageInfoProto {
    fn default() -> &'a StorageInfoProto {
        <StorageInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl StorageInfoProto {
    pub fn new() -> StorageInfoProto {
        ::std::default::Default::default()
    }

    // required uint32 layoutVersion = 1;


    pub fn get_layoutVersion(&self) -> u32 {
        self.layoutVersion.unwrap_or(0)
    }
    pub fn clear_layoutVersion(&mut self) {
        self.layoutVersion = ::std::option::Option::None;
    }

    pub fn has_layoutVersion(&self) -> bool {
        self.layoutVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layoutVersion(&mut self, v: u32) {
        self.layoutVersion = ::std::option::Option::Some(v);
    }

    // required uint32 namespceID = 2;


    pub fn get_namespceID(&self) -> u32 {
        self.namespceID.unwrap_or(0)
    }
    pub fn clear_namespceID(&mut self) {
        self.namespceID = ::std::option::Option::None;
    }

    pub fn has_namespceID(&self) -> bool {
        self.namespceID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_namespceID(&mut self, v: u32) {
        self.namespceID = ::std::option::Option::Some(v);
    }

    // required string clusterID = 3;


    pub fn get_clusterID(&self) -> &str {
        match self.clusterID.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_clusterID(&mut self) {
        self.clusterID.clear();
    }

    pub fn has_clusterID(&self) -> bool {
        self.clusterID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clusterID(&mut self, v: ::std::string::String) {
        self.clusterID = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clusterID(&mut self) -> &mut ::std::string::String {
        if self.clusterID.is_none() {
            self.clusterID.set_default();
        }
        self.clusterID.as_mut().unwrap()
    }

    // Take field
    pub fn take_clusterID(&mut self) -> ::std::string::String {
        self.clusterID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 cTime = 4;


    pub fn get_cTime(&self) -> u64 {
        self.cTime.unwrap_or(0)
    }
    pub fn clear_cTime(&mut self) {
        self.cTime = ::std::option::Option::None;
    }

    pub fn has_cTime(&self) -> bool {
        self.cTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cTime(&mut self, v: u64) {
        self.cTime = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for StorageInfoProto {
    fn is_initialized(&self) -> bool {
        if self.layoutVersion.is_none() {
            return false;
        }
        if self.namespceID.is_none() {
            return false;
        }
        if self.clusterID.is_none() {
            return false;
        }
        if self.cTime.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.layoutVersion = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.namespceID = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.clusterID)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cTime = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.layoutVersion {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.namespceID {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.clusterID.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.cTime {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.layoutVersion {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.namespceID {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.clusterID.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.cTime {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageInfoProto {
        StorageInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "layoutVersion",
                |m: &StorageInfoProto| { &m.layoutVersion },
                |m: &mut StorageInfoProto| { &mut m.layoutVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "namespceID",
                |m: &StorageInfoProto| { &m.namespceID },
                |m: &mut StorageInfoProto| { &mut m.namespceID },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clusterID",
                |m: &StorageInfoProto| { &m.clusterID },
                |m: &mut StorageInfoProto| { &mut m.clusterID },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "cTime",
                |m: &StorageInfoProto| { &m.cTime },
                |m: &mut StorageInfoProto| { &mut m.cTime },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StorageInfoProto>(
                "StorageInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StorageInfoProto {
        static instance: ::protobuf::rt::LazyV2<StorageInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StorageInfoProto::new)
    }
}

impl ::protobuf::Clear for StorageInfoProto {
    fn clear(&mut self) {
        self.layoutVersion = ::std::option::Option::None;
        self.namespceID = ::std::option::Option::None;
        self.clusterID.clear();
        self.cTime = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NamenodeRegistrationProto {
    // message fields
    rpcAddress: ::protobuf::SingularField<::std::string::String>,
    httpAddress: ::protobuf::SingularField<::std::string::String>,
    pub storageInfo: ::protobuf::SingularPtrField<StorageInfoProto>,
    role: ::std::option::Option<NamenodeRegistrationProto_NamenodeRoleProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NamenodeRegistrationProto {
    fn default() -> &'a NamenodeRegistrationProto {
        <NamenodeRegistrationProto as ::protobuf::Message>::default_instance()
    }
}

impl NamenodeRegistrationProto {
    pub fn new() -> NamenodeRegistrationProto {
        ::std::default::Default::default()
    }

    // required string rpcAddress = 1;


    pub fn get_rpcAddress(&self) -> &str {
        match self.rpcAddress.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_rpcAddress(&mut self) {
        self.rpcAddress.clear();
    }

    pub fn has_rpcAddress(&self) -> bool {
        self.rpcAddress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpcAddress(&mut self, v: ::std::string::String) {
        self.rpcAddress = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpcAddress(&mut self) -> &mut ::std::string::String {
        if self.rpcAddress.is_none() {
            self.rpcAddress.set_default();
        }
        self.rpcAddress.as_mut().unwrap()
    }

    // Take field
    pub fn take_rpcAddress(&mut self) -> ::std::string::String {
        self.rpcAddress.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string httpAddress = 2;


    pub fn get_httpAddress(&self) -> &str {
        match self.httpAddress.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_httpAddress(&mut self) {
        self.httpAddress.clear();
    }

    pub fn has_httpAddress(&self) -> bool {
        self.httpAddress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_httpAddress(&mut self, v: ::std::string::String) {
        self.httpAddress = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_httpAddress(&mut self) -> &mut ::std::string::String {
        if self.httpAddress.is_none() {
            self.httpAddress.set_default();
        }
        self.httpAddress.as_mut().unwrap()
    }

    // Take field
    pub fn take_httpAddress(&mut self) -> ::std::string::String {
        self.httpAddress.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .hadoop.hdfs.StorageInfoProto storageInfo = 3;


    pub fn get_storageInfo(&self) -> &StorageInfoProto {
        self.storageInfo.as_ref().unwrap_or_else(|| <StorageInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_storageInfo(&mut self) {
        self.storageInfo.clear();
    }

    pub fn has_storageInfo(&self) -> bool {
        self.storageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storageInfo(&mut self, v: StorageInfoProto) {
        self.storageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storageInfo(&mut self) -> &mut StorageInfoProto {
        if self.storageInfo.is_none() {
            self.storageInfo.set_default();
        }
        self.storageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_storageInfo(&mut self) -> StorageInfoProto {
        self.storageInfo.take().unwrap_or_else(|| StorageInfoProto::new())
    }

    // optional .hadoop.hdfs.NamenodeRegistrationProto.NamenodeRoleProto role = 4;


    pub fn get_role(&self) -> NamenodeRegistrationProto_NamenodeRoleProto {
        self.role.unwrap_or(NamenodeRegistrationProto_NamenodeRoleProto::NAMENODE)
    }
    pub fn clear_role(&mut self) {
        self.role = ::std::option::Option::None;
    }

    pub fn has_role(&self) -> bool {
        self.role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: NamenodeRegistrationProto_NamenodeRoleProto) {
        self.role = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for NamenodeRegistrationProto {
    fn is_initialized(&self) -> bool {
        if self.rpcAddress.is_none() {
            return false;
        }
        if self.httpAddress.is_none() {
            return false;
        }
        if self.storageInfo.is_none() {
            return false;
        }
        for v in &self.storageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rpcAddress)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.httpAddress)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storageInfo)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rpcAddress.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.httpAddress.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.storageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.role {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rpcAddress.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.httpAddress.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.storageInfo.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.role {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NamenodeRegistrationProto {
        NamenodeRegistrationProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rpcAddress",
                |m: &NamenodeRegistrationProto| { &m.rpcAddress },
                |m: &mut NamenodeRegistrationProto| { &mut m.rpcAddress },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "httpAddress",
                |m: &NamenodeRegistrationProto| { &m.httpAddress },
                |m: &mut NamenodeRegistrationProto| { &mut m.httpAddress },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StorageInfoProto>>(
                "storageInfo",
                |m: &NamenodeRegistrationProto| { &m.storageInfo },
                |m: &mut NamenodeRegistrationProto| { &mut m.storageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NamenodeRegistrationProto_NamenodeRoleProto>>(
                "role",
                |m: &NamenodeRegistrationProto| { &m.role },
                |m: &mut NamenodeRegistrationProto| { &mut m.role },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NamenodeRegistrationProto>(
                "NamenodeRegistrationProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NamenodeRegistrationProto {
        static instance: ::protobuf::rt::LazyV2<NamenodeRegistrationProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NamenodeRegistrationProto::new)
    }
}

impl ::protobuf::Clear for NamenodeRegistrationProto {
    fn clear(&mut self) {
        self.rpcAddress.clear();
        self.httpAddress.clear();
        self.storageInfo.clear();
        self.role = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NamenodeRegistrationProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NamenodeRegistrationProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NamenodeRegistrationProto_NamenodeRoleProto {
    NAMENODE = 1,
    BACKUP = 2,
    CHECKPOINT = 3,
}

impl ::protobuf::ProtobufEnum for NamenodeRegistrationProto_NamenodeRoleProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NamenodeRegistrationProto_NamenodeRoleProto> {
        match value {
            1 => ::std::option::Option::Some(NamenodeRegistrationProto_NamenodeRoleProto::NAMENODE),
            2 => ::std::option::Option::Some(NamenodeRegistrationProto_NamenodeRoleProto::BACKUP),
            3 => ::std::option::Option::Some(NamenodeRegistrationProto_NamenodeRoleProto::CHECKPOINT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NamenodeRegistrationProto_NamenodeRoleProto] = &[
            NamenodeRegistrationProto_NamenodeRoleProto::NAMENODE,
            NamenodeRegistrationProto_NamenodeRoleProto::BACKUP,
            NamenodeRegistrationProto_NamenodeRoleProto::CHECKPOINT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<NamenodeRegistrationProto_NamenodeRoleProto>("NamenodeRegistrationProto.NamenodeRoleProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for NamenodeRegistrationProto_NamenodeRoleProto {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for NamenodeRegistrationProto_NamenodeRoleProto {
    fn default() -> Self {
        NamenodeRegistrationProto_NamenodeRoleProto::NAMENODE
    }
}

impl ::protobuf::reflect::ProtobufValue for NamenodeRegistrationProto_NamenodeRoleProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NNHAStatusHeartbeatProto {
    // message fields
    state: ::std::option::Option<NNHAStatusHeartbeatProto_State>,
    txid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NNHAStatusHeartbeatProto {
    fn default() -> &'a NNHAStatusHeartbeatProto {
        <NNHAStatusHeartbeatProto as ::protobuf::Message>::default_instance()
    }
}

impl NNHAStatusHeartbeatProto {
    pub fn new() -> NNHAStatusHeartbeatProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.NNHAStatusHeartbeatProto.State state = 1;


    pub fn get_state(&self) -> NNHAStatusHeartbeatProto_State {
        self.state.unwrap_or(NNHAStatusHeartbeatProto_State::ACTIVE)
    }
    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: NNHAStatusHeartbeatProto_State) {
        self.state = ::std::option::Option::Some(v);
    }

    // required uint64 txid = 2;


    pub fn get_txid(&self) -> u64 {
        self.txid.unwrap_or(0)
    }
    pub fn clear_txid(&mut self) {
        self.txid = ::std::option::Option::None;
    }

    pub fn has_txid(&self) -> bool {
        self.txid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txid(&mut self, v: u64) {
        self.txid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for NNHAStatusHeartbeatProto {
    fn is_initialized(&self) -> bool {
        if self.state.is_none() {
            return false;
        }
        if self.txid.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.txid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.txid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.state {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.txid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NNHAStatusHeartbeatProto {
        NNHAStatusHeartbeatProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NNHAStatusHeartbeatProto_State>>(
                "state",
                |m: &NNHAStatusHeartbeatProto| { &m.state },
                |m: &mut NNHAStatusHeartbeatProto| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "txid",
                |m: &NNHAStatusHeartbeatProto| { &m.txid },
                |m: &mut NNHAStatusHeartbeatProto| { &mut m.txid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NNHAStatusHeartbeatProto>(
                "NNHAStatusHeartbeatProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NNHAStatusHeartbeatProto {
        static instance: ::protobuf::rt::LazyV2<NNHAStatusHeartbeatProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NNHAStatusHeartbeatProto::new)
    }
}

impl ::protobuf::Clear for NNHAStatusHeartbeatProto {
    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.txid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NNHAStatusHeartbeatProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NNHAStatusHeartbeatProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NNHAStatusHeartbeatProto_State {
    ACTIVE = 0,
    STANDBY = 1,
    OBSERVER = 2,
}

impl ::protobuf::ProtobufEnum for NNHAStatusHeartbeatProto_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NNHAStatusHeartbeatProto_State> {
        match value {
            0 => ::std::option::Option::Some(NNHAStatusHeartbeatProto_State::ACTIVE),
            1 => ::std::option::Option::Some(NNHAStatusHeartbeatProto_State::STANDBY),
            2 => ::std::option::Option::Some(NNHAStatusHeartbeatProto_State::OBSERVER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NNHAStatusHeartbeatProto_State] = &[
            NNHAStatusHeartbeatProto_State::ACTIVE,
            NNHAStatusHeartbeatProto_State::STANDBY,
            NNHAStatusHeartbeatProto_State::OBSERVER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<NNHAStatusHeartbeatProto_State>("NNHAStatusHeartbeatProto.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for NNHAStatusHeartbeatProto_State {
}

impl ::std::default::Default for NNHAStatusHeartbeatProto_State {
    fn default() -> Self {
        NNHAStatusHeartbeatProto_State::ACTIVE
    }
}

impl ::protobuf::reflect::ProtobufValue for NNHAStatusHeartbeatProto_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ReplicaStateProto {
    FINALIZED = 0,
    RBW = 1,
    RWR = 2,
    RUR = 3,
    TEMPORARY = 4,
}

impl ::protobuf::ProtobufEnum for ReplicaStateProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReplicaStateProto> {
        match value {
            0 => ::std::option::Option::Some(ReplicaStateProto::FINALIZED),
            1 => ::std::option::Option::Some(ReplicaStateProto::RBW),
            2 => ::std::option::Option::Some(ReplicaStateProto::RWR),
            3 => ::std::option::Option::Some(ReplicaStateProto::RUR),
            4 => ::std::option::Option::Some(ReplicaStateProto::TEMPORARY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReplicaStateProto] = &[
            ReplicaStateProto::FINALIZED,
            ReplicaStateProto::RBW,
            ReplicaStateProto::RWR,
            ReplicaStateProto::RUR,
            ReplicaStateProto::TEMPORARY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ReplicaStateProto>("ReplicaStateProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ReplicaStateProto {
}

impl ::std::default::Default for ReplicaStateProto {
    fn default() -> Self {
        ReplicaStateProto::FINALIZED
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplicaStateProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10HdfsServer.proto\x12\x0bhadoop.hdfs\x1a\nhdfs.proto\x1a\x17HAServi\
    ceProtocol.proto\"i\n\rBlockKeyProto\x12\x16\n\x05keyId\x18\x01\x20\x02(\
    \rR\x05keyIdB\0\x12\x20\n\nexpiryDate\x18\x02\x20\x02(\x04R\nexpiryDateB\
    \0\x12\x1c\n\x08keyBytes\x18\x03\x20\x01(\x0cR\x08keyBytesB\0:\0\"\x9c\
    \x02\n\x16ExportedBlockKeysProto\x122\n\x13isBlockTokenEnabled\x18\x01\
    \x20\x02(\x08R\x13isBlockTokenEnabledB\0\x12.\n\x11keyUpdateInterval\x18\
    \x02\x20\x02(\x04R\x11keyUpdateIntervalB\0\x12&\n\rtokenLifeTime\x18\x03\
    \x20\x02(\x04R\rtokenLifeTimeB\0\x12<\n\ncurrentKey\x18\x04\x20\x02(\x0b\
    2\x1a.hadoop.hdfs.BlockKeyProtoR\ncurrentKeyB\0\x126\n\x07allKeys\x18\
    \x05\x20\x03(\x0b2\x1a.hadoop.hdfs.BlockKeyProtoR\x07allKeysB\0:\0\"\xbf\
    \x02\n\x17BlockWithLocationsProto\x12/\n\x05block\x18\x01\x20\x02(\x0b2\
    \x17.hadoop.hdfs.BlockProtoR\x05blockB\0\x12&\n\rdatanodeUuids\x18\x02\
    \x20\x03(\tR\rdatanodeUuidsB\0\x12$\n\x0cstorageUuids\x18\x03\x20\x03(\t\
    R\x0cstorageUuidsB\0\x12C\n\x0cstorageTypes\x18\x04\x20\x03(\x0e2\x1d.ha\
    doop.hdfs.StorageTypeProtoR\x0cstorageTypesB\0\x12\x1a\n\x07indices\x18\
    \x05\x20\x01(\x0cR\x07indicesB\0\x12$\n\x0cdataBlockNum\x18\x06\x20\x01(\
    \rR\x0cdataBlockNumB\0\x12\x1c\n\x08cellSize\x18\x07\x20\x01(\rR\x08cell\
    SizeB\0:\0\"\\\n\x18BlocksWithLocationsProto\x12>\n\x06blocks\x18\x01\
    \x20\x03(\x0b2$.hadoop.hdfs.BlockWithLocationsProtoR\x06blocksB\0:\0\"\
    \x7f\n\x12RemoteEditLogProto\x12\x1e\n\tstartTxId\x18\x01\x20\x02(\x04R\
    \tstartTxIdB\0\x12\x1a\n\x07endTxId\x18\x02\x20\x02(\x04R\x07endTxIdB\0\
    \x12+\n\x0cisInProgress\x18\x03\x20\x01(\x08:\x05falseR\x0cisInProgressB\
    \0:\0\"\x7f\n\x1aRemoteEditLogManifestProto\x125\n\x04logs\x18\x01\x20\
    \x03(\x0b2\x1f.hadoop.hdfs.RemoteEditLogProtoR\x04logsB\0\x12(\n\x0ecomm\
    ittedTxnId\x18\x02\x20\x01(\x04R\x0ecommittedTxnIdB\0:\0\"\xd7\x02\n\x12\
    NamespaceInfoProto\x12$\n\x0cbuildVersion\x18\x01\x20\x02(\tR\x0cbuildVe\
    rsionB\0\x12\x18\n\x06unused\x18\x02\x20\x02(\rR\x06unusedB\0\x12\"\n\
    \x0bblockPoolID\x18\x03\x20\x02(\tR\x0bblockPoolIDB\0\x12A\n\x0bstorageI\
    nfo\x18\x04\x20\x02(\x0b2\x1d.hadoop.hdfs.StorageInfoProtoR\x0bstorageIn\
    foB\0\x12*\n\x0fsoftwareVersion\x18\x05\x20\x02(\tR\x0fsoftwareVersionB\
    \0\x12'\n\x0ccapabilities\x18\x06\x20\x01(\x04:\x010R\x0ccapabilitiesB\0\
    \x12C\n\x05state\x18\x07\x20\x01(\x0e2+.hadoop.hdfs.NNHAStatusHeartbeatP\
    roto.StateR\x05stateB\0:\0\"\xa0\x02\n\x14RecoveringBlockProto\x12\"\n\
    \x0bnewGenStamp\x18\x01\x20\x02(\x04R\x0bnewGenStampB\0\x126\n\x05block\
    \x18\x02\x20\x02(\x0b2\x1e.hadoop.hdfs.LocatedBlockProtoR\x05blockB\0\
    \x12?\n\rtruncateBlock\x18\x03\x20\x01(\x0b2\x17.hadoop.hdfs.BlockProtoR\
    \rtruncateBlockB\0\x12C\n\x08ecPolicy\x18\x04\x20\x01(\x0b2%.hadoop.hdfs\
    .ErasureCodingPolicyProtoR\x08ecPolicyB\0\x12$\n\x0cblockIndices\x18\x05\
    \x20\x01(\x0cR\x0cblockIndicesB\0:\0\"\xeb\x01\n\x18CheckpointSignatureP\
    roto\x12\"\n\x0bblockPoolId\x18\x01\x20\x02(\tR\x0bblockPoolIdB\0\x12<\n\
    \x18mostRecentCheckpointTxId\x18\x02\x20\x02(\x04R\x18mostRecentCheckpoi\
    ntTxIdB\0\x12(\n\x0ecurSegmentTxId\x18\x03\x20\x02(\x04R\x0ecurSegmentTx\
    IdB\0\x12A\n\x0bstorageInfo\x18\x04\x20\x02(\x0b2\x1d.hadoop.hdfs.Storag\
    eInfoProtoR\x0bstorageInfoB\0:\0\"\x91\x01\n\x16CheckpointCommandProto\
    \x12E\n\tsignature\x18\x01\x20\x02(\x0b2%.hadoop.hdfs.CheckpointSignatur\
    eProtoR\tsignatureB\0\x12.\n\x11needToReturnImage\x18\x02\x20\x02(\x08R\
    \x11needToReturnImageB\0:\0\"\xf3\x01\n\x14NamenodeCommandProto\x12\x18\
    \n\x06action\x18\x01\x20\x02(\rR\x06actionB\0\x12<\n\x04type\x18\x02\x20\
    \x02(\x0e2&.hadoop.hdfs.NamenodeCommandProto.TypeR\x04typeB\0\x12K\n\rch\
    eckpointCmd\x18\x03\x20\x01(\x0b2#.hadoop.hdfs.CheckpointCommandProtoR\r\
    checkpointCmdB\0\"4\n\x04Type\x12\x13\n\x0fNamenodeCommand\x10\0\x12\x15\
    \n\x11CheckPointCommand\x10\x01\x1a\0:\0\"\x17\n\x13VersionRequestProto:\
    \0\"O\n\x14VersionResponseProto\x125\n\x04info\x18\x01\x20\x02(\x0b2\x1f\
    .hadoop.hdfs.NamespaceInfoProtoR\x04infoB\0:\0\"\x96\x01\n\x10StorageInf\
    oProto\x12&\n\rlayoutVersion\x18\x01\x20\x02(\rR\rlayoutVersionB\0\x12\
    \x20\n\nnamespceID\x18\x02\x20\x02(\rR\nnamespceIDB\0\x12\x1e\n\tcluster\
    ID\x18\x03\x20\x02(\tR\tclusterIDB\0\x12\x16\n\x05cTime\x18\x04\x20\x02(\
    \x04R\x05cTimeB\0:\0\"\xc1\x02\n\x19NamenodeRegistrationProto\x12\x20\n\
    \nrpcAddress\x18\x01\x20\x02(\tR\nrpcAddressB\0\x12\"\n\x0bhttpAddress\
    \x18\x02\x20\x02(\tR\x0bhttpAddressB\0\x12A\n\x0bstorageInfo\x18\x03\x20\
    \x02(\x0b2\x1d.hadoop.hdfs.StorageInfoProtoR\x0bstorageInfoB\0\x12X\n\
    \x04role\x18\x04\x20\x01(\x0e28.hadoop.hdfs.NamenodeRegistrationProto.Na\
    menodeRoleProto:\x08NAMENODER\x04roleB\0\"?\n\x11NamenodeRoleProto\x12\
    \x0c\n\x08NAMENODE\x10\x01\x12\n\n\x06BACKUP\x10\x02\x12\x0e\n\nCHECKPOI\
    NT\x10\x03\x1a\0:\0\"\xa9\x01\n\x18NNHAStatusHeartbeatProto\x12C\n\x05st\
    ate\x18\x01\x20\x02(\x0e2+.hadoop.hdfs.NNHAStatusHeartbeatProto.StateR\
    \x05stateB\0\x12\x14\n\x04txid\x18\x02\x20\x02(\x04R\x04txidB\0\"0\n\x05\
    State\x12\n\n\x06ACTIVE\x10\0\x12\x0b\n\x07STANDBY\x10\x01\x12\x0c\n\x08\
    OBSERVER\x10\x02\x1a\0:\0*N\n\x11ReplicaStateProto\x12\r\n\tFINALIZED\
    \x10\0\x12\x07\n\x03RBW\x10\x01\x12\x07\n\x03RWR\x10\x02\x12\x07\n\x03RU\
    R\x10\x03\x12\r\n\tTEMPORARY\x10\x04\x1a\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
