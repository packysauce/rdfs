// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `JournalProtocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct JournalInfoProto {
    // message fields
    clusterID: ::protobuf::SingularField<::std::string::String>,
    layoutVersion: ::std::option::Option<u32>,
    namespaceID: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JournalInfoProto {
    fn default() -> &'a JournalInfoProto {
        <JournalInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl JournalInfoProto {
    pub fn new() -> JournalInfoProto {
        ::std::default::Default::default()
    }

    // required string clusterID = 1;


    pub fn get_clusterID(&self) -> &str {
        match self.clusterID.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_clusterID(&mut self) {
        self.clusterID.clear();
    }

    pub fn has_clusterID(&self) -> bool {
        self.clusterID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clusterID(&mut self, v: ::std::string::String) {
        self.clusterID = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clusterID(&mut self) -> &mut ::std::string::String {
        if self.clusterID.is_none() {
            self.clusterID.set_default();
        }
        self.clusterID.as_mut().unwrap()
    }

    // Take field
    pub fn take_clusterID(&mut self) -> ::std::string::String {
        self.clusterID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 layoutVersion = 2;


    pub fn get_layoutVersion(&self) -> u32 {
        self.layoutVersion.unwrap_or(0)
    }
    pub fn clear_layoutVersion(&mut self) {
        self.layoutVersion = ::std::option::Option::None;
    }

    pub fn has_layoutVersion(&self) -> bool {
        self.layoutVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layoutVersion(&mut self, v: u32) {
        self.layoutVersion = ::std::option::Option::Some(v);
    }

    // optional uint32 namespaceID = 3;


    pub fn get_namespaceID(&self) -> u32 {
        self.namespaceID.unwrap_or(0)
    }
    pub fn clear_namespaceID(&mut self) {
        self.namespaceID = ::std::option::Option::None;
    }

    pub fn has_namespaceID(&self) -> bool {
        self.namespaceID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_namespaceID(&mut self, v: u32) {
        self.namespaceID = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for JournalInfoProto {
    fn is_initialized(&self) -> bool {
        if self.clusterID.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.clusterID)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.layoutVersion = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.namespaceID = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.clusterID.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.layoutVersion {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.namespaceID {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.clusterID.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.layoutVersion {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.namespaceID {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JournalInfoProto {
        JournalInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clusterID",
                |m: &JournalInfoProto| { &m.clusterID },
                |m: &mut JournalInfoProto| { &mut m.clusterID },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "layoutVersion",
                |m: &JournalInfoProto| { &m.layoutVersion },
                |m: &mut JournalInfoProto| { &mut m.layoutVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "namespaceID",
                |m: &JournalInfoProto| { &m.namespaceID },
                |m: &mut JournalInfoProto| { &mut m.namespaceID },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<JournalInfoProto>(
                "JournalInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static JournalInfoProto {
        static instance: ::protobuf::rt::LazyV2<JournalInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(JournalInfoProto::new)
    }
}

impl ::protobuf::Clear for JournalInfoProto {
    fn clear(&mut self) {
        self.clusterID.clear();
        self.layoutVersion = ::std::option::Option::None;
        self.namespaceID = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JournalInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JournalInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JournalRequestProto {
    // message fields
    pub journalInfo: ::protobuf::SingularPtrField<JournalInfoProto>,
    firstTxnId: ::std::option::Option<u64>,
    numTxns: ::std::option::Option<u32>,
    records: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    epoch: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JournalRequestProto {
    fn default() -> &'a JournalRequestProto {
        <JournalRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl JournalRequestProto {
    pub fn new() -> JournalRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.JournalInfoProto journalInfo = 1;


    pub fn get_journalInfo(&self) -> &JournalInfoProto {
        self.journalInfo.as_ref().unwrap_or_else(|| <JournalInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_journalInfo(&mut self) {
        self.journalInfo.clear();
    }

    pub fn has_journalInfo(&self) -> bool {
        self.journalInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_journalInfo(&mut self, v: JournalInfoProto) {
        self.journalInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_journalInfo(&mut self) -> &mut JournalInfoProto {
        if self.journalInfo.is_none() {
            self.journalInfo.set_default();
        }
        self.journalInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_journalInfo(&mut self) -> JournalInfoProto {
        self.journalInfo.take().unwrap_or_else(|| JournalInfoProto::new())
    }

    // required uint64 firstTxnId = 2;


    pub fn get_firstTxnId(&self) -> u64 {
        self.firstTxnId.unwrap_or(0)
    }
    pub fn clear_firstTxnId(&mut self) {
        self.firstTxnId = ::std::option::Option::None;
    }

    pub fn has_firstTxnId(&self) -> bool {
        self.firstTxnId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_firstTxnId(&mut self, v: u64) {
        self.firstTxnId = ::std::option::Option::Some(v);
    }

    // required uint32 numTxns = 3;


    pub fn get_numTxns(&self) -> u32 {
        self.numTxns.unwrap_or(0)
    }
    pub fn clear_numTxns(&mut self) {
        self.numTxns = ::std::option::Option::None;
    }

    pub fn has_numTxns(&self) -> bool {
        self.numTxns.is_some()
    }

    // Param is passed by value, moved
    pub fn set_numTxns(&mut self, v: u32) {
        self.numTxns = ::std::option::Option::Some(v);
    }

    // required bytes records = 4;


    pub fn get_records(&self) -> &[u8] {
        match self.records.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_records(&mut self) {
        self.records.clear();
    }

    pub fn has_records(&self) -> bool {
        self.records.is_some()
    }

    // Param is passed by value, moved
    pub fn set_records(&mut self, v: ::std::vec::Vec<u8>) {
        self.records = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_records(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.records.is_none() {
            self.records.set_default();
        }
        self.records.as_mut().unwrap()
    }

    // Take field
    pub fn take_records(&mut self) -> ::std::vec::Vec<u8> {
        self.records.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint64 epoch = 5;


    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for JournalRequestProto {
    fn is_initialized(&self) -> bool {
        if self.journalInfo.is_none() {
            return false;
        }
        if self.firstTxnId.is_none() {
            return false;
        }
        if self.numTxns.is_none() {
            return false;
        }
        if self.records.is_none() {
            return false;
        }
        if self.epoch.is_none() {
            return false;
        }
        for v in &self.journalInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.journalInfo)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.firstTxnId = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.numTxns = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.records)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.journalInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.firstTxnId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.numTxns {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.records.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.journalInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.firstTxnId {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.numTxns {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.records.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(v) = self.epoch {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JournalRequestProto {
        JournalRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<JournalInfoProto>>(
                "journalInfo",
                |m: &JournalRequestProto| { &m.journalInfo },
                |m: &mut JournalRequestProto| { &mut m.journalInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "firstTxnId",
                |m: &JournalRequestProto| { &m.firstTxnId },
                |m: &mut JournalRequestProto| { &mut m.firstTxnId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "numTxns",
                |m: &JournalRequestProto| { &m.numTxns },
                |m: &mut JournalRequestProto| { &mut m.numTxns },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "records",
                |m: &JournalRequestProto| { &m.records },
                |m: &mut JournalRequestProto| { &mut m.records },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &JournalRequestProto| { &m.epoch },
                |m: &mut JournalRequestProto| { &mut m.epoch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<JournalRequestProto>(
                "JournalRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static JournalRequestProto {
        static instance: ::protobuf::rt::LazyV2<JournalRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(JournalRequestProto::new)
    }
}

impl ::protobuf::Clear for JournalRequestProto {
    fn clear(&mut self) {
        self.journalInfo.clear();
        self.firstTxnId = ::std::option::Option::None;
        self.numTxns = ::std::option::Option::None;
        self.records.clear();
        self.epoch = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JournalRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JournalRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JournalResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JournalResponseProto {
    fn default() -> &'a JournalResponseProto {
        <JournalResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl JournalResponseProto {
    pub fn new() -> JournalResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for JournalResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JournalResponseProto {
        JournalResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<JournalResponseProto>(
                "JournalResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static JournalResponseProto {
        static instance: ::protobuf::rt::LazyV2<JournalResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(JournalResponseProto::new)
    }
}

impl ::protobuf::Clear for JournalResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JournalResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JournalResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartLogSegmentRequestProto {
    // message fields
    pub journalInfo: ::protobuf::SingularPtrField<JournalInfoProto>,
    txid: ::std::option::Option<u64>,
    epoch: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartLogSegmentRequestProto {
    fn default() -> &'a StartLogSegmentRequestProto {
        <StartLogSegmentRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl StartLogSegmentRequestProto {
    pub fn new() -> StartLogSegmentRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.JournalInfoProto journalInfo = 1;


    pub fn get_journalInfo(&self) -> &JournalInfoProto {
        self.journalInfo.as_ref().unwrap_or_else(|| <JournalInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_journalInfo(&mut self) {
        self.journalInfo.clear();
    }

    pub fn has_journalInfo(&self) -> bool {
        self.journalInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_journalInfo(&mut self, v: JournalInfoProto) {
        self.journalInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_journalInfo(&mut self) -> &mut JournalInfoProto {
        if self.journalInfo.is_none() {
            self.journalInfo.set_default();
        }
        self.journalInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_journalInfo(&mut self) -> JournalInfoProto {
        self.journalInfo.take().unwrap_or_else(|| JournalInfoProto::new())
    }

    // required uint64 txid = 2;


    pub fn get_txid(&self) -> u64 {
        self.txid.unwrap_or(0)
    }
    pub fn clear_txid(&mut self) {
        self.txid = ::std::option::Option::None;
    }

    pub fn has_txid(&self) -> bool {
        self.txid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txid(&mut self, v: u64) {
        self.txid = ::std::option::Option::Some(v);
    }

    // required uint64 epoch = 3;


    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for StartLogSegmentRequestProto {
    fn is_initialized(&self) -> bool {
        if self.journalInfo.is_none() {
            return false;
        }
        if self.txid.is_none() {
            return false;
        }
        if self.epoch.is_none() {
            return false;
        }
        for v in &self.journalInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.journalInfo)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.txid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.journalInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.txid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.journalInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.txid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.epoch {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartLogSegmentRequestProto {
        StartLogSegmentRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<JournalInfoProto>>(
                "journalInfo",
                |m: &StartLogSegmentRequestProto| { &m.journalInfo },
                |m: &mut StartLogSegmentRequestProto| { &mut m.journalInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "txid",
                |m: &StartLogSegmentRequestProto| { &m.txid },
                |m: &mut StartLogSegmentRequestProto| { &mut m.txid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &StartLogSegmentRequestProto| { &m.epoch },
                |m: &mut StartLogSegmentRequestProto| { &mut m.epoch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartLogSegmentRequestProto>(
                "StartLogSegmentRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartLogSegmentRequestProto {
        static instance: ::protobuf::rt::LazyV2<StartLogSegmentRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartLogSegmentRequestProto::new)
    }
}

impl ::protobuf::Clear for StartLogSegmentRequestProto {
    fn clear(&mut self) {
        self.journalInfo.clear();
        self.txid = ::std::option::Option::None;
        self.epoch = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartLogSegmentRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartLogSegmentRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartLogSegmentResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartLogSegmentResponseProto {
    fn default() -> &'a StartLogSegmentResponseProto {
        <StartLogSegmentResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl StartLogSegmentResponseProto {
    pub fn new() -> StartLogSegmentResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StartLogSegmentResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartLogSegmentResponseProto {
        StartLogSegmentResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartLogSegmentResponseProto>(
                "StartLogSegmentResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartLogSegmentResponseProto {
        static instance: ::protobuf::rt::LazyV2<StartLogSegmentResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartLogSegmentResponseProto::new)
    }
}

impl ::protobuf::Clear for StartLogSegmentResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartLogSegmentResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartLogSegmentResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FenceRequestProto {
    // message fields
    pub journalInfo: ::protobuf::SingularPtrField<JournalInfoProto>,
    epoch: ::std::option::Option<u64>,
    fencerInfo: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FenceRequestProto {
    fn default() -> &'a FenceRequestProto {
        <FenceRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl FenceRequestProto {
    pub fn new() -> FenceRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.JournalInfoProto journalInfo = 1;


    pub fn get_journalInfo(&self) -> &JournalInfoProto {
        self.journalInfo.as_ref().unwrap_or_else(|| <JournalInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_journalInfo(&mut self) {
        self.journalInfo.clear();
    }

    pub fn has_journalInfo(&self) -> bool {
        self.journalInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_journalInfo(&mut self, v: JournalInfoProto) {
        self.journalInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_journalInfo(&mut self) -> &mut JournalInfoProto {
        if self.journalInfo.is_none() {
            self.journalInfo.set_default();
        }
        self.journalInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_journalInfo(&mut self) -> JournalInfoProto {
        self.journalInfo.take().unwrap_or_else(|| JournalInfoProto::new())
    }

    // required uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }

    // optional string fencerInfo = 3;


    pub fn get_fencerInfo(&self) -> &str {
        match self.fencerInfo.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_fencerInfo(&mut self) {
        self.fencerInfo.clear();
    }

    pub fn has_fencerInfo(&self) -> bool {
        self.fencerInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fencerInfo(&mut self, v: ::std::string::String) {
        self.fencerInfo = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fencerInfo(&mut self) -> &mut ::std::string::String {
        if self.fencerInfo.is_none() {
            self.fencerInfo.set_default();
        }
        self.fencerInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_fencerInfo(&mut self) -> ::std::string::String {
        self.fencerInfo.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for FenceRequestProto {
    fn is_initialized(&self) -> bool {
        if self.journalInfo.is_none() {
            return false;
        }
        if self.epoch.is_none() {
            return false;
        }
        for v in &self.journalInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.journalInfo)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.fencerInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.journalInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.fencerInfo.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.journalInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.epoch {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.fencerInfo.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FenceRequestProto {
        FenceRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<JournalInfoProto>>(
                "journalInfo",
                |m: &FenceRequestProto| { &m.journalInfo },
                |m: &mut FenceRequestProto| { &mut m.journalInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &FenceRequestProto| { &m.epoch },
                |m: &mut FenceRequestProto| { &mut m.epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fencerInfo",
                |m: &FenceRequestProto| { &m.fencerInfo },
                |m: &mut FenceRequestProto| { &mut m.fencerInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FenceRequestProto>(
                "FenceRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FenceRequestProto {
        static instance: ::protobuf::rt::LazyV2<FenceRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FenceRequestProto::new)
    }
}

impl ::protobuf::Clear for FenceRequestProto {
    fn clear(&mut self) {
        self.journalInfo.clear();
        self.epoch = ::std::option::Option::None;
        self.fencerInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FenceRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FenceRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FenceResponseProto {
    // message fields
    previousEpoch: ::std::option::Option<u64>,
    lastTransactionId: ::std::option::Option<u64>,
    inSync: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FenceResponseProto {
    fn default() -> &'a FenceResponseProto {
        <FenceResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl FenceResponseProto {
    pub fn new() -> FenceResponseProto {
        ::std::default::Default::default()
    }

    // optional uint64 previousEpoch = 1;


    pub fn get_previousEpoch(&self) -> u64 {
        self.previousEpoch.unwrap_or(0)
    }
    pub fn clear_previousEpoch(&mut self) {
        self.previousEpoch = ::std::option::Option::None;
    }

    pub fn has_previousEpoch(&self) -> bool {
        self.previousEpoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_previousEpoch(&mut self, v: u64) {
        self.previousEpoch = ::std::option::Option::Some(v);
    }

    // optional uint64 lastTransactionId = 2;


    pub fn get_lastTransactionId(&self) -> u64 {
        self.lastTransactionId.unwrap_or(0)
    }
    pub fn clear_lastTransactionId(&mut self) {
        self.lastTransactionId = ::std::option::Option::None;
    }

    pub fn has_lastTransactionId(&self) -> bool {
        self.lastTransactionId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lastTransactionId(&mut self, v: u64) {
        self.lastTransactionId = ::std::option::Option::Some(v);
    }

    // optional bool inSync = 3;


    pub fn get_inSync(&self) -> bool {
        self.inSync.unwrap_or(false)
    }
    pub fn clear_inSync(&mut self) {
        self.inSync = ::std::option::Option::None;
    }

    pub fn has_inSync(&self) -> bool {
        self.inSync.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inSync(&mut self, v: bool) {
        self.inSync = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for FenceResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.previousEpoch = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.lastTransactionId = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.inSync = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.previousEpoch {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lastTransactionId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.inSync {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.previousEpoch {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.lastTransactionId {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.inSync {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FenceResponseProto {
        FenceResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "previousEpoch",
                |m: &FenceResponseProto| { &m.previousEpoch },
                |m: &mut FenceResponseProto| { &mut m.previousEpoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "lastTransactionId",
                |m: &FenceResponseProto| { &m.lastTransactionId },
                |m: &mut FenceResponseProto| { &mut m.lastTransactionId },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "inSync",
                |m: &FenceResponseProto| { &m.inSync },
                |m: &mut FenceResponseProto| { &mut m.inSync },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FenceResponseProto>(
                "FenceResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FenceResponseProto {
        static instance: ::protobuf::rt::LazyV2<FenceResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FenceResponseProto::new)
    }
}

impl ::protobuf::Clear for FenceResponseProto {
    fn clear(&mut self) {
        self.previousEpoch = ::std::option::Option::None;
        self.lastTransactionId = ::std::option::Option::None;
        self.inSync = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FenceResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FenceResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15JournalProtocol.proto\x12\x0bhadoop.hdfs\x1a\nhdfs.proto\x1a\x10Hd\
    fsServer.proto\"\x80\x01\n\x10JournalInfoProto\x12\x1e\n\tclusterID\x18\
    \x01\x20\x02(\tR\tclusterIDB\0\x12&\n\rlayoutVersion\x18\x02\x20\x01(\rR\
    \rlayoutVersionB\0\x12\"\n\x0bnamespaceID\x18\x03\x20\x01(\rR\x0bnamespa\
    ceIDB\0:\0\"\xcc\x01\n\x13JournalRequestProto\x12A\n\x0bjournalInfo\x18\
    \x01\x20\x02(\x0b2\x1d.hadoop.hdfs.JournalInfoProtoR\x0bjournalInfoB\0\
    \x12\x20\n\nfirstTxnId\x18\x02\x20\x02(\x04R\nfirstTxnIdB\0\x12\x1a\n\
    \x07numTxns\x18\x03\x20\x02(\rR\x07numTxnsB\0\x12\x1a\n\x07records\x18\
    \x04\x20\x02(\x0cR\x07recordsB\0\x12\x16\n\x05epoch\x18\x05\x20\x02(\x04\
    R\x05epochB\0:\0\"\x18\n\x14JournalResponseProto:\0\"\x90\x01\n\x1bStart\
    LogSegmentRequestProto\x12A\n\x0bjournalInfo\x18\x01\x20\x02(\x0b2\x1d.h\
    adoop.hdfs.JournalInfoProtoR\x0bjournalInfoB\0\x12\x14\n\x04txid\x18\x02\
    \x20\x02(\x04R\x04txidB\0\x12\x16\n\x05epoch\x18\x03\x20\x02(\x04R\x05ep\
    ochB\0:\0\"\x20\n\x1cStartLogSegmentResponseProto:\0\"\x92\x01\n\x11Fenc\
    eRequestProto\x12A\n\x0bjournalInfo\x18\x01\x20\x02(\x0b2\x1d.hadoop.hdf\
    s.JournalInfoProtoR\x0bjournalInfoB\0\x12\x16\n\x05epoch\x18\x02\x20\x02\
    (\x04R\x05epochB\0\x12\x20\n\nfencerInfo\x18\x03\x20\x01(\tR\nfencerInfo\
    B\0:\0\"\x88\x01\n\x12FenceResponseProto\x12&\n\rpreviousEpoch\x18\x01\
    \x20\x01(\x04R\rpreviousEpochB\0\x12.\n\x11lastTransactionId\x18\x02\x20\
    \x01(\x04R\x11lastTransactionIdB\0\x12\x18\n\x06inSync\x18\x03\x20\x01(\
    \x08R\x06inSyncB\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
