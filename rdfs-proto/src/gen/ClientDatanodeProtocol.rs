// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ClientDatanodeProtocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct GetReplicaVisibleLengthRequestProto {
    // message fields
    pub block: ::protobuf::SingularPtrField<super::hdfs::ExtendedBlockProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetReplicaVisibleLengthRequestProto {
    fn default() -> &'a GetReplicaVisibleLengthRequestProto {
        <GetReplicaVisibleLengthRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetReplicaVisibleLengthRequestProto {
    pub fn new() -> GetReplicaVisibleLengthRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.ExtendedBlockProto block = 1;


    pub fn get_block(&self) -> &super::hdfs::ExtendedBlockProto {
        self.block.as_ref().unwrap_or_else(|| <super::hdfs::ExtendedBlockProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::hdfs::ExtendedBlockProto) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::hdfs::ExtendedBlockProto {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::hdfs::ExtendedBlockProto {
        self.block.take().unwrap_or_else(|| super::hdfs::ExtendedBlockProto::new())
    }
}

impl ::protobuf::Message for GetReplicaVisibleLengthRequestProto {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        }
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReplicaVisibleLengthRequestProto {
        GetReplicaVisibleLengthRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ExtendedBlockProto>>(
                "block",
                |m: &GetReplicaVisibleLengthRequestProto| { &m.block },
                |m: &mut GetReplicaVisibleLengthRequestProto| { &mut m.block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetReplicaVisibleLengthRequestProto>(
                "GetReplicaVisibleLengthRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetReplicaVisibleLengthRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetReplicaVisibleLengthRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetReplicaVisibleLengthRequestProto::new)
    }
}

impl ::protobuf::Clear for GetReplicaVisibleLengthRequestProto {
    fn clear(&mut self) {
        self.block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReplicaVisibleLengthRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReplicaVisibleLengthRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetReplicaVisibleLengthResponseProto {
    // message fields
    length: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetReplicaVisibleLengthResponseProto {
    fn default() -> &'a GetReplicaVisibleLengthResponseProto {
        <GetReplicaVisibleLengthResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetReplicaVisibleLengthResponseProto {
    pub fn new() -> GetReplicaVisibleLengthResponseProto {
        ::std::default::Default::default()
    }

    // required uint64 length = 1;


    pub fn get_length(&self) -> u64 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u64) {
        self.length = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for GetReplicaVisibleLengthResponseProto {
    fn is_initialized(&self) -> bool {
        if self.length.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.length {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReplicaVisibleLengthResponseProto {
        GetReplicaVisibleLengthResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "length",
                |m: &GetReplicaVisibleLengthResponseProto| { &m.length },
                |m: &mut GetReplicaVisibleLengthResponseProto| { &mut m.length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetReplicaVisibleLengthResponseProto>(
                "GetReplicaVisibleLengthResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetReplicaVisibleLengthResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetReplicaVisibleLengthResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetReplicaVisibleLengthResponseProto::new)
    }
}

impl ::protobuf::Clear for GetReplicaVisibleLengthResponseProto {
    fn clear(&mut self) {
        self.length = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReplicaVisibleLengthResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReplicaVisibleLengthResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RefreshNamenodesRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RefreshNamenodesRequestProto {
    fn default() -> &'a RefreshNamenodesRequestProto {
        <RefreshNamenodesRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl RefreshNamenodesRequestProto {
    pub fn new() -> RefreshNamenodesRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RefreshNamenodesRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RefreshNamenodesRequestProto {
        RefreshNamenodesRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RefreshNamenodesRequestProto>(
                "RefreshNamenodesRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RefreshNamenodesRequestProto {
        static instance: ::protobuf::rt::LazyV2<RefreshNamenodesRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RefreshNamenodesRequestProto::new)
    }
}

impl ::protobuf::Clear for RefreshNamenodesRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RefreshNamenodesRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RefreshNamenodesRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RefreshNamenodesResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RefreshNamenodesResponseProto {
    fn default() -> &'a RefreshNamenodesResponseProto {
        <RefreshNamenodesResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl RefreshNamenodesResponseProto {
    pub fn new() -> RefreshNamenodesResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RefreshNamenodesResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RefreshNamenodesResponseProto {
        RefreshNamenodesResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RefreshNamenodesResponseProto>(
                "RefreshNamenodesResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RefreshNamenodesResponseProto {
        static instance: ::protobuf::rt::LazyV2<RefreshNamenodesResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RefreshNamenodesResponseProto::new)
    }
}

impl ::protobuf::Clear for RefreshNamenodesResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RefreshNamenodesResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RefreshNamenodesResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteBlockPoolRequestProto {
    // message fields
    blockPool: ::protobuf::SingularField<::std::string::String>,
    force: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteBlockPoolRequestProto {
    fn default() -> &'a DeleteBlockPoolRequestProto {
        <DeleteBlockPoolRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl DeleteBlockPoolRequestProto {
    pub fn new() -> DeleteBlockPoolRequestProto {
        ::std::default::Default::default()
    }

    // required string blockPool = 1;


    pub fn get_blockPool(&self) -> &str {
        match self.blockPool.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_blockPool(&mut self) {
        self.blockPool.clear();
    }

    pub fn has_blockPool(&self) -> bool {
        self.blockPool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blockPool(&mut self, v: ::std::string::String) {
        self.blockPool = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blockPool(&mut self) -> &mut ::std::string::String {
        if self.blockPool.is_none() {
            self.blockPool.set_default();
        }
        self.blockPool.as_mut().unwrap()
    }

    // Take field
    pub fn take_blockPool(&mut self) -> ::std::string::String {
        self.blockPool.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bool force = 2;


    pub fn get_force(&self) -> bool {
        self.force.unwrap_or(false)
    }
    pub fn clear_force(&mut self) {
        self.force = ::std::option::Option::None;
    }

    pub fn has_force(&self) -> bool {
        self.force.is_some()
    }

    // Param is passed by value, moved
    pub fn set_force(&mut self, v: bool) {
        self.force = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DeleteBlockPoolRequestProto {
    fn is_initialized(&self) -> bool {
        if self.blockPool.is_none() {
            return false;
        }
        if self.force.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.blockPool)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.force = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.blockPool.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.force {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.blockPool.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.force {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteBlockPoolRequestProto {
        DeleteBlockPoolRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "blockPool",
                |m: &DeleteBlockPoolRequestProto| { &m.blockPool },
                |m: &mut DeleteBlockPoolRequestProto| { &mut m.blockPool },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "force",
                |m: &DeleteBlockPoolRequestProto| { &m.force },
                |m: &mut DeleteBlockPoolRequestProto| { &mut m.force },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteBlockPoolRequestProto>(
                "DeleteBlockPoolRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteBlockPoolRequestProto {
        static instance: ::protobuf::rt::LazyV2<DeleteBlockPoolRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteBlockPoolRequestProto::new)
    }
}

impl ::protobuf::Clear for DeleteBlockPoolRequestProto {
    fn clear(&mut self) {
        self.blockPool.clear();
        self.force = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteBlockPoolRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteBlockPoolRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteBlockPoolResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteBlockPoolResponseProto {
    fn default() -> &'a DeleteBlockPoolResponseProto {
        <DeleteBlockPoolResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl DeleteBlockPoolResponseProto {
    pub fn new() -> DeleteBlockPoolResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteBlockPoolResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteBlockPoolResponseProto {
        DeleteBlockPoolResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteBlockPoolResponseProto>(
                "DeleteBlockPoolResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteBlockPoolResponseProto {
        static instance: ::protobuf::rt::LazyV2<DeleteBlockPoolResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteBlockPoolResponseProto::new)
    }
}

impl ::protobuf::Clear for DeleteBlockPoolResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteBlockPoolResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteBlockPoolResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBlockLocalPathInfoRequestProto {
    // message fields
    pub block: ::protobuf::SingularPtrField<super::hdfs::ExtendedBlockProto>,
    pub token: ::protobuf::SingularPtrField<super::Security::TokenProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBlockLocalPathInfoRequestProto {
    fn default() -> &'a GetBlockLocalPathInfoRequestProto {
        <GetBlockLocalPathInfoRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetBlockLocalPathInfoRequestProto {
    pub fn new() -> GetBlockLocalPathInfoRequestProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.ExtendedBlockProto block = 1;


    pub fn get_block(&self) -> &super::hdfs::ExtendedBlockProto {
        self.block.as_ref().unwrap_or_else(|| <super::hdfs::ExtendedBlockProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::hdfs::ExtendedBlockProto) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::hdfs::ExtendedBlockProto {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::hdfs::ExtendedBlockProto {
        self.block.take().unwrap_or_else(|| super::hdfs::ExtendedBlockProto::new())
    }

    // required .hadoop.common.TokenProto token = 2;


    pub fn get_token(&self) -> &super::Security::TokenProto {
        self.token.as_ref().unwrap_or_else(|| <super::Security::TokenProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: super::Security::TokenProto) {
        self.token = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut super::Security::TokenProto {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> super::Security::TokenProto {
        self.token.take().unwrap_or_else(|| super::Security::TokenProto::new())
    }
}

impl ::protobuf::Message for GetBlockLocalPathInfoRequestProto {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        }
        if self.token.is_none() {
            return false;
        }
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.token {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.token.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBlockLocalPathInfoRequestProto {
        GetBlockLocalPathInfoRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ExtendedBlockProto>>(
                "block",
                |m: &GetBlockLocalPathInfoRequestProto| { &m.block },
                |m: &mut GetBlockLocalPathInfoRequestProto| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Security::TokenProto>>(
                "token",
                |m: &GetBlockLocalPathInfoRequestProto| { &m.token },
                |m: &mut GetBlockLocalPathInfoRequestProto| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetBlockLocalPathInfoRequestProto>(
                "GetBlockLocalPathInfoRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetBlockLocalPathInfoRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetBlockLocalPathInfoRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetBlockLocalPathInfoRequestProto::new)
    }
}

impl ::protobuf::Clear for GetBlockLocalPathInfoRequestProto {
    fn clear(&mut self) {
        self.block.clear();
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBlockLocalPathInfoRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBlockLocalPathInfoRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBlockLocalPathInfoResponseProto {
    // message fields
    pub block: ::protobuf::SingularPtrField<super::hdfs::ExtendedBlockProto>,
    localPath: ::protobuf::SingularField<::std::string::String>,
    localMetaPath: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBlockLocalPathInfoResponseProto {
    fn default() -> &'a GetBlockLocalPathInfoResponseProto {
        <GetBlockLocalPathInfoResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetBlockLocalPathInfoResponseProto {
    pub fn new() -> GetBlockLocalPathInfoResponseProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.ExtendedBlockProto block = 1;


    pub fn get_block(&self) -> &super::hdfs::ExtendedBlockProto {
        self.block.as_ref().unwrap_or_else(|| <super::hdfs::ExtendedBlockProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::hdfs::ExtendedBlockProto) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::hdfs::ExtendedBlockProto {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::hdfs::ExtendedBlockProto {
        self.block.take().unwrap_or_else(|| super::hdfs::ExtendedBlockProto::new())
    }

    // required string localPath = 2;


    pub fn get_localPath(&self) -> &str {
        match self.localPath.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_localPath(&mut self) {
        self.localPath.clear();
    }

    pub fn has_localPath(&self) -> bool {
        self.localPath.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localPath(&mut self, v: ::std::string::String) {
        self.localPath = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localPath(&mut self) -> &mut ::std::string::String {
        if self.localPath.is_none() {
            self.localPath.set_default();
        }
        self.localPath.as_mut().unwrap()
    }

    // Take field
    pub fn take_localPath(&mut self) -> ::std::string::String {
        self.localPath.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string localMetaPath = 3;


    pub fn get_localMetaPath(&self) -> &str {
        match self.localMetaPath.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_localMetaPath(&mut self) {
        self.localMetaPath.clear();
    }

    pub fn has_localMetaPath(&self) -> bool {
        self.localMetaPath.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localMetaPath(&mut self, v: ::std::string::String) {
        self.localMetaPath = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localMetaPath(&mut self) -> &mut ::std::string::String {
        if self.localMetaPath.is_none() {
            self.localMetaPath.set_default();
        }
        self.localMetaPath.as_mut().unwrap()
    }

    // Take field
    pub fn take_localMetaPath(&mut self) -> ::std::string::String {
        self.localMetaPath.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetBlockLocalPathInfoResponseProto {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        }
        if self.localPath.is_none() {
            return false;
        }
        if self.localMetaPath.is_none() {
            return false;
        }
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.localPath)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.localMetaPath)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.localPath.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.localMetaPath.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.localPath.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.localMetaPath.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBlockLocalPathInfoResponseProto {
        GetBlockLocalPathInfoResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::ExtendedBlockProto>>(
                "block",
                |m: &GetBlockLocalPathInfoResponseProto| { &m.block },
                |m: &mut GetBlockLocalPathInfoResponseProto| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localPath",
                |m: &GetBlockLocalPathInfoResponseProto| { &m.localPath },
                |m: &mut GetBlockLocalPathInfoResponseProto| { &mut m.localPath },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localMetaPath",
                |m: &GetBlockLocalPathInfoResponseProto| { &m.localMetaPath },
                |m: &mut GetBlockLocalPathInfoResponseProto| { &mut m.localMetaPath },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetBlockLocalPathInfoResponseProto>(
                "GetBlockLocalPathInfoResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetBlockLocalPathInfoResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetBlockLocalPathInfoResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetBlockLocalPathInfoResponseProto::new)
    }
}

impl ::protobuf::Clear for GetBlockLocalPathInfoResponseProto {
    fn clear(&mut self) {
        self.block.clear();
        self.localPath.clear();
        self.localMetaPath.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBlockLocalPathInfoResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBlockLocalPathInfoResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShutdownDatanodeRequestProto {
    // message fields
    forUpgrade: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShutdownDatanodeRequestProto {
    fn default() -> &'a ShutdownDatanodeRequestProto {
        <ShutdownDatanodeRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl ShutdownDatanodeRequestProto {
    pub fn new() -> ShutdownDatanodeRequestProto {
        ::std::default::Default::default()
    }

    // required bool forUpgrade = 1;


    pub fn get_forUpgrade(&self) -> bool {
        self.forUpgrade.unwrap_or(false)
    }
    pub fn clear_forUpgrade(&mut self) {
        self.forUpgrade = ::std::option::Option::None;
    }

    pub fn has_forUpgrade(&self) -> bool {
        self.forUpgrade.is_some()
    }

    // Param is passed by value, moved
    pub fn set_forUpgrade(&mut self, v: bool) {
        self.forUpgrade = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ShutdownDatanodeRequestProto {
    fn is_initialized(&self) -> bool {
        if self.forUpgrade.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.forUpgrade = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.forUpgrade {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.forUpgrade {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShutdownDatanodeRequestProto {
        ShutdownDatanodeRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "forUpgrade",
                |m: &ShutdownDatanodeRequestProto| { &m.forUpgrade },
                |m: &mut ShutdownDatanodeRequestProto| { &mut m.forUpgrade },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShutdownDatanodeRequestProto>(
                "ShutdownDatanodeRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShutdownDatanodeRequestProto {
        static instance: ::protobuf::rt::LazyV2<ShutdownDatanodeRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShutdownDatanodeRequestProto::new)
    }
}

impl ::protobuf::Clear for ShutdownDatanodeRequestProto {
    fn clear(&mut self) {
        self.forUpgrade = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShutdownDatanodeRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShutdownDatanodeRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShutdownDatanodeResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShutdownDatanodeResponseProto {
    fn default() -> &'a ShutdownDatanodeResponseProto {
        <ShutdownDatanodeResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl ShutdownDatanodeResponseProto {
    pub fn new() -> ShutdownDatanodeResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ShutdownDatanodeResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShutdownDatanodeResponseProto {
        ShutdownDatanodeResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShutdownDatanodeResponseProto>(
                "ShutdownDatanodeResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShutdownDatanodeResponseProto {
        static instance: ::protobuf::rt::LazyV2<ShutdownDatanodeResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShutdownDatanodeResponseProto::new)
    }
}

impl ::protobuf::Clear for ShutdownDatanodeResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShutdownDatanodeResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShutdownDatanodeResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EvictWritersRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EvictWritersRequestProto {
    fn default() -> &'a EvictWritersRequestProto {
        <EvictWritersRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl EvictWritersRequestProto {
    pub fn new() -> EvictWritersRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EvictWritersRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EvictWritersRequestProto {
        EvictWritersRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EvictWritersRequestProto>(
                "EvictWritersRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EvictWritersRequestProto {
        static instance: ::protobuf::rt::LazyV2<EvictWritersRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EvictWritersRequestProto::new)
    }
}

impl ::protobuf::Clear for EvictWritersRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EvictWritersRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvictWritersRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EvictWritersResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EvictWritersResponseProto {
    fn default() -> &'a EvictWritersResponseProto {
        <EvictWritersResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl EvictWritersResponseProto {
    pub fn new() -> EvictWritersResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EvictWritersResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EvictWritersResponseProto {
        EvictWritersResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EvictWritersResponseProto>(
                "EvictWritersResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EvictWritersResponseProto {
        static instance: ::protobuf::rt::LazyV2<EvictWritersResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EvictWritersResponseProto::new)
    }
}

impl ::protobuf::Clear for EvictWritersResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EvictWritersResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvictWritersResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDatanodeInfoRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDatanodeInfoRequestProto {
    fn default() -> &'a GetDatanodeInfoRequestProto {
        <GetDatanodeInfoRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetDatanodeInfoRequestProto {
    pub fn new() -> GetDatanodeInfoRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetDatanodeInfoRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDatanodeInfoRequestProto {
        GetDatanodeInfoRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetDatanodeInfoRequestProto>(
                "GetDatanodeInfoRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetDatanodeInfoRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetDatanodeInfoRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetDatanodeInfoRequestProto::new)
    }
}

impl ::protobuf::Clear for GetDatanodeInfoRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDatanodeInfoRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDatanodeInfoRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDatanodeInfoResponseProto {
    // message fields
    pub localInfo: ::protobuf::SingularPtrField<super::hdfs::DatanodeLocalInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDatanodeInfoResponseProto {
    fn default() -> &'a GetDatanodeInfoResponseProto {
        <GetDatanodeInfoResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetDatanodeInfoResponseProto {
    pub fn new() -> GetDatanodeInfoResponseProto {
        ::std::default::Default::default()
    }

    // required .hadoop.hdfs.DatanodeLocalInfoProto localInfo = 1;


    pub fn get_localInfo(&self) -> &super::hdfs::DatanodeLocalInfoProto {
        self.localInfo.as_ref().unwrap_or_else(|| <super::hdfs::DatanodeLocalInfoProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_localInfo(&mut self) {
        self.localInfo.clear();
    }

    pub fn has_localInfo(&self) -> bool {
        self.localInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localInfo(&mut self, v: super::hdfs::DatanodeLocalInfoProto) {
        self.localInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localInfo(&mut self) -> &mut super::hdfs::DatanodeLocalInfoProto {
        if self.localInfo.is_none() {
            self.localInfo.set_default();
        }
        self.localInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_localInfo(&mut self) -> super::hdfs::DatanodeLocalInfoProto {
        self.localInfo.take().unwrap_or_else(|| super::hdfs::DatanodeLocalInfoProto::new())
    }
}

impl ::protobuf::Message for GetDatanodeInfoResponseProto {
    fn is_initialized(&self) -> bool {
        if self.localInfo.is_none() {
            return false;
        }
        for v in &self.localInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.localInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.localInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.localInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDatanodeInfoResponseProto {
        GetDatanodeInfoResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::DatanodeLocalInfoProto>>(
                "localInfo",
                |m: &GetDatanodeInfoResponseProto| { &m.localInfo },
                |m: &mut GetDatanodeInfoResponseProto| { &mut m.localInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetDatanodeInfoResponseProto>(
                "GetDatanodeInfoResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetDatanodeInfoResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetDatanodeInfoResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetDatanodeInfoResponseProto::new)
    }
}

impl ::protobuf::Clear for GetDatanodeInfoResponseProto {
    fn clear(&mut self) {
        self.localInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDatanodeInfoResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDatanodeInfoResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetVolumeReportRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVolumeReportRequestProto {
    fn default() -> &'a GetVolumeReportRequestProto {
        <GetVolumeReportRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetVolumeReportRequestProto {
    pub fn new() -> GetVolumeReportRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetVolumeReportRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVolumeReportRequestProto {
        GetVolumeReportRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetVolumeReportRequestProto>(
                "GetVolumeReportRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetVolumeReportRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetVolumeReportRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetVolumeReportRequestProto::new)
    }
}

impl ::protobuf::Clear for GetVolumeReportRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVolumeReportRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVolumeReportRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetVolumeReportResponseProto {
    // message fields
    pub volumeInfo: ::protobuf::RepeatedField<super::hdfs::DatanodeVolumeInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVolumeReportResponseProto {
    fn default() -> &'a GetVolumeReportResponseProto {
        <GetVolumeReportResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetVolumeReportResponseProto {
    pub fn new() -> GetVolumeReportResponseProto {
        ::std::default::Default::default()
    }

    // repeated .hadoop.hdfs.DatanodeVolumeInfoProto volumeInfo = 1;


    pub fn get_volumeInfo(&self) -> &[super::hdfs::DatanodeVolumeInfoProto] {
        &self.volumeInfo
    }
    pub fn clear_volumeInfo(&mut self) {
        self.volumeInfo.clear();
    }

    // Param is passed by value, moved
    pub fn set_volumeInfo(&mut self, v: ::protobuf::RepeatedField<super::hdfs::DatanodeVolumeInfoProto>) {
        self.volumeInfo = v;
    }

    // Mutable pointer to the field.
    pub fn mut_volumeInfo(&mut self) -> &mut ::protobuf::RepeatedField<super::hdfs::DatanodeVolumeInfoProto> {
        &mut self.volumeInfo
    }

    // Take field
    pub fn take_volumeInfo(&mut self) -> ::protobuf::RepeatedField<super::hdfs::DatanodeVolumeInfoProto> {
        ::std::mem::replace(&mut self.volumeInfo, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetVolumeReportResponseProto {
    fn is_initialized(&self) -> bool {
        for v in &self.volumeInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.volumeInfo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.volumeInfo {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.volumeInfo {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVolumeReportResponseProto {
        GetVolumeReportResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hdfs::DatanodeVolumeInfoProto>>(
                "volumeInfo",
                |m: &GetVolumeReportResponseProto| { &m.volumeInfo },
                |m: &mut GetVolumeReportResponseProto| { &mut m.volumeInfo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetVolumeReportResponseProto>(
                "GetVolumeReportResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetVolumeReportResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetVolumeReportResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetVolumeReportResponseProto::new)
    }
}

impl ::protobuf::Clear for GetVolumeReportResponseProto {
    fn clear(&mut self) {
        self.volumeInfo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVolumeReportResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVolumeReportResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TriggerBlockReportRequestProto {
    // message fields
    incremental: ::std::option::Option<bool>,
    nnAddress: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TriggerBlockReportRequestProto {
    fn default() -> &'a TriggerBlockReportRequestProto {
        <TriggerBlockReportRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl TriggerBlockReportRequestProto {
    pub fn new() -> TriggerBlockReportRequestProto {
        ::std::default::Default::default()
    }

    // required bool incremental = 1;


    pub fn get_incremental(&self) -> bool {
        self.incremental.unwrap_or(false)
    }
    pub fn clear_incremental(&mut self) {
        self.incremental = ::std::option::Option::None;
    }

    pub fn has_incremental(&self) -> bool {
        self.incremental.is_some()
    }

    // Param is passed by value, moved
    pub fn set_incremental(&mut self, v: bool) {
        self.incremental = ::std::option::Option::Some(v);
    }

    // optional string nnAddress = 2;


    pub fn get_nnAddress(&self) -> &str {
        match self.nnAddress.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_nnAddress(&mut self) {
        self.nnAddress.clear();
    }

    pub fn has_nnAddress(&self) -> bool {
        self.nnAddress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nnAddress(&mut self, v: ::std::string::String) {
        self.nnAddress = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nnAddress(&mut self) -> &mut ::std::string::String {
        if self.nnAddress.is_none() {
            self.nnAddress.set_default();
        }
        self.nnAddress.as_mut().unwrap()
    }

    // Take field
    pub fn take_nnAddress(&mut self) -> ::std::string::String {
        self.nnAddress.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TriggerBlockReportRequestProto {
    fn is_initialized(&self) -> bool {
        if self.incremental.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.incremental = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.nnAddress)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.incremental {
            my_size += 2;
        }
        if let Some(ref v) = self.nnAddress.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.incremental {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.nnAddress.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TriggerBlockReportRequestProto {
        TriggerBlockReportRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "incremental",
                |m: &TriggerBlockReportRequestProto| { &m.incremental },
                |m: &mut TriggerBlockReportRequestProto| { &mut m.incremental },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nnAddress",
                |m: &TriggerBlockReportRequestProto| { &m.nnAddress },
                |m: &mut TriggerBlockReportRequestProto| { &mut m.nnAddress },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TriggerBlockReportRequestProto>(
                "TriggerBlockReportRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TriggerBlockReportRequestProto {
        static instance: ::protobuf::rt::LazyV2<TriggerBlockReportRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TriggerBlockReportRequestProto::new)
    }
}

impl ::protobuf::Clear for TriggerBlockReportRequestProto {
    fn clear(&mut self) {
        self.incremental = ::std::option::Option::None;
        self.nnAddress.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TriggerBlockReportRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TriggerBlockReportRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TriggerBlockReportResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TriggerBlockReportResponseProto {
    fn default() -> &'a TriggerBlockReportResponseProto {
        <TriggerBlockReportResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl TriggerBlockReportResponseProto {
    pub fn new() -> TriggerBlockReportResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TriggerBlockReportResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TriggerBlockReportResponseProto {
        TriggerBlockReportResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TriggerBlockReportResponseProto>(
                "TriggerBlockReportResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TriggerBlockReportResponseProto {
        static instance: ::protobuf::rt::LazyV2<TriggerBlockReportResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TriggerBlockReportResponseProto::new)
    }
}

impl ::protobuf::Clear for TriggerBlockReportResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TriggerBlockReportResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TriggerBlockReportResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBalancerBandwidthRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBalancerBandwidthRequestProto {
    fn default() -> &'a GetBalancerBandwidthRequestProto {
        <GetBalancerBandwidthRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl GetBalancerBandwidthRequestProto {
    pub fn new() -> GetBalancerBandwidthRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetBalancerBandwidthRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBalancerBandwidthRequestProto {
        GetBalancerBandwidthRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetBalancerBandwidthRequestProto>(
                "GetBalancerBandwidthRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetBalancerBandwidthRequestProto {
        static instance: ::protobuf::rt::LazyV2<GetBalancerBandwidthRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetBalancerBandwidthRequestProto::new)
    }
}

impl ::protobuf::Clear for GetBalancerBandwidthRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBalancerBandwidthRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalancerBandwidthRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBalancerBandwidthResponseProto {
    // message fields
    bandwidth: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBalancerBandwidthResponseProto {
    fn default() -> &'a GetBalancerBandwidthResponseProto {
        <GetBalancerBandwidthResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl GetBalancerBandwidthResponseProto {
    pub fn new() -> GetBalancerBandwidthResponseProto {
        ::std::default::Default::default()
    }

    // required uint64 bandwidth = 1;


    pub fn get_bandwidth(&self) -> u64 {
        self.bandwidth.unwrap_or(0)
    }
    pub fn clear_bandwidth(&mut self) {
        self.bandwidth = ::std::option::Option::None;
    }

    pub fn has_bandwidth(&self) -> bool {
        self.bandwidth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bandwidth(&mut self, v: u64) {
        self.bandwidth = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for GetBalancerBandwidthResponseProto {
    fn is_initialized(&self) -> bool {
        if self.bandwidth.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bandwidth = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.bandwidth {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.bandwidth {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBalancerBandwidthResponseProto {
        GetBalancerBandwidthResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "bandwidth",
                |m: &GetBalancerBandwidthResponseProto| { &m.bandwidth },
                |m: &mut GetBalancerBandwidthResponseProto| { &mut m.bandwidth },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetBalancerBandwidthResponseProto>(
                "GetBalancerBandwidthResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetBalancerBandwidthResponseProto {
        static instance: ::protobuf::rt::LazyV2<GetBalancerBandwidthResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetBalancerBandwidthResponseProto::new)
    }
}

impl ::protobuf::Clear for GetBalancerBandwidthResponseProto {
    fn clear(&mut self) {
        self.bandwidth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBalancerBandwidthResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalancerBandwidthResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubmitDiskBalancerPlanRequestProto {
    // message fields
    planID: ::protobuf::SingularField<::std::string::String>,
    plan: ::protobuf::SingularField<::std::string::String>,
    planVersion: ::std::option::Option<u64>,
    ignoreDateCheck: ::std::option::Option<bool>,
    planFile: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubmitDiskBalancerPlanRequestProto {
    fn default() -> &'a SubmitDiskBalancerPlanRequestProto {
        <SubmitDiskBalancerPlanRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl SubmitDiskBalancerPlanRequestProto {
    pub fn new() -> SubmitDiskBalancerPlanRequestProto {
        ::std::default::Default::default()
    }

    // required string planID = 1;


    pub fn get_planID(&self) -> &str {
        match self.planID.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_planID(&mut self) {
        self.planID.clear();
    }

    pub fn has_planID(&self) -> bool {
        self.planID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planID(&mut self, v: ::std::string::String) {
        self.planID = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_planID(&mut self) -> &mut ::std::string::String {
        if self.planID.is_none() {
            self.planID.set_default();
        }
        self.planID.as_mut().unwrap()
    }

    // Take field
    pub fn take_planID(&mut self) -> ::std::string::String {
        self.planID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string plan = 2;


    pub fn get_plan(&self) -> &str {
        match self.plan.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_plan(&mut self) {
        self.plan.clear();
    }

    pub fn has_plan(&self) -> bool {
        self.plan.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plan(&mut self, v: ::std::string::String) {
        self.plan = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plan(&mut self) -> &mut ::std::string::String {
        if self.plan.is_none() {
            self.plan.set_default();
        }
        self.plan.as_mut().unwrap()
    }

    // Take field
    pub fn take_plan(&mut self) -> ::std::string::String {
        self.plan.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 planVersion = 3;


    pub fn get_planVersion(&self) -> u64 {
        self.planVersion.unwrap_or(0)
    }
    pub fn clear_planVersion(&mut self) {
        self.planVersion = ::std::option::Option::None;
    }

    pub fn has_planVersion(&self) -> bool {
        self.planVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planVersion(&mut self, v: u64) {
        self.planVersion = ::std::option::Option::Some(v);
    }

    // optional bool ignoreDateCheck = 4;


    pub fn get_ignoreDateCheck(&self) -> bool {
        self.ignoreDateCheck.unwrap_or(false)
    }
    pub fn clear_ignoreDateCheck(&mut self) {
        self.ignoreDateCheck = ::std::option::Option::None;
    }

    pub fn has_ignoreDateCheck(&self) -> bool {
        self.ignoreDateCheck.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ignoreDateCheck(&mut self, v: bool) {
        self.ignoreDateCheck = ::std::option::Option::Some(v);
    }

    // required string planFile = 5;


    pub fn get_planFile(&self) -> &str {
        match self.planFile.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_planFile(&mut self) {
        self.planFile.clear();
    }

    pub fn has_planFile(&self) -> bool {
        self.planFile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planFile(&mut self, v: ::std::string::String) {
        self.planFile = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_planFile(&mut self) -> &mut ::std::string::String {
        if self.planFile.is_none() {
            self.planFile.set_default();
        }
        self.planFile.as_mut().unwrap()
    }

    // Take field
    pub fn take_planFile(&mut self) -> ::std::string::String {
        self.planFile.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for SubmitDiskBalancerPlanRequestProto {
    fn is_initialized(&self) -> bool {
        if self.planID.is_none() {
            return false;
        }
        if self.plan.is_none() {
            return false;
        }
        if self.planFile.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.planID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.plan)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.planVersion = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignoreDateCheck = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.planFile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.planID.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.plan.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.planVersion {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ignoreDateCheck {
            my_size += 2;
        }
        if let Some(ref v) = self.planFile.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.planID.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.plan.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.planVersion {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.ignoreDateCheck {
            os.write_bool(4, v)?;
        }
        if let Some(ref v) = self.planFile.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubmitDiskBalancerPlanRequestProto {
        SubmitDiskBalancerPlanRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "planID",
                |m: &SubmitDiskBalancerPlanRequestProto| { &m.planID },
                |m: &mut SubmitDiskBalancerPlanRequestProto| { &mut m.planID },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "plan",
                |m: &SubmitDiskBalancerPlanRequestProto| { &m.plan },
                |m: &mut SubmitDiskBalancerPlanRequestProto| { &mut m.plan },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "planVersion",
                |m: &SubmitDiskBalancerPlanRequestProto| { &m.planVersion },
                |m: &mut SubmitDiskBalancerPlanRequestProto| { &mut m.planVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignoreDateCheck",
                |m: &SubmitDiskBalancerPlanRequestProto| { &m.ignoreDateCheck },
                |m: &mut SubmitDiskBalancerPlanRequestProto| { &mut m.ignoreDateCheck },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "planFile",
                |m: &SubmitDiskBalancerPlanRequestProto| { &m.planFile },
                |m: &mut SubmitDiskBalancerPlanRequestProto| { &mut m.planFile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubmitDiskBalancerPlanRequestProto>(
                "SubmitDiskBalancerPlanRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubmitDiskBalancerPlanRequestProto {
        static instance: ::protobuf::rt::LazyV2<SubmitDiskBalancerPlanRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubmitDiskBalancerPlanRequestProto::new)
    }
}

impl ::protobuf::Clear for SubmitDiskBalancerPlanRequestProto {
    fn clear(&mut self) {
        self.planID.clear();
        self.plan.clear();
        self.planVersion = ::std::option::Option::None;
        self.ignoreDateCheck = ::std::option::Option::None;
        self.planFile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubmitDiskBalancerPlanRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubmitDiskBalancerPlanRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubmitDiskBalancerPlanResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubmitDiskBalancerPlanResponseProto {
    fn default() -> &'a SubmitDiskBalancerPlanResponseProto {
        <SubmitDiskBalancerPlanResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl SubmitDiskBalancerPlanResponseProto {
    pub fn new() -> SubmitDiskBalancerPlanResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubmitDiskBalancerPlanResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubmitDiskBalancerPlanResponseProto {
        SubmitDiskBalancerPlanResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubmitDiskBalancerPlanResponseProto>(
                "SubmitDiskBalancerPlanResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubmitDiskBalancerPlanResponseProto {
        static instance: ::protobuf::rt::LazyV2<SubmitDiskBalancerPlanResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubmitDiskBalancerPlanResponseProto::new)
    }
}

impl ::protobuf::Clear for SubmitDiskBalancerPlanResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubmitDiskBalancerPlanResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubmitDiskBalancerPlanResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelPlanRequestProto {
    // message fields
    planID: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelPlanRequestProto {
    fn default() -> &'a CancelPlanRequestProto {
        <CancelPlanRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl CancelPlanRequestProto {
    pub fn new() -> CancelPlanRequestProto {
        ::std::default::Default::default()
    }

    // required string planID = 1;


    pub fn get_planID(&self) -> &str {
        match self.planID.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_planID(&mut self) {
        self.planID.clear();
    }

    pub fn has_planID(&self) -> bool {
        self.planID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planID(&mut self, v: ::std::string::String) {
        self.planID = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_planID(&mut self) -> &mut ::std::string::String {
        if self.planID.is_none() {
            self.planID.set_default();
        }
        self.planID.as_mut().unwrap()
    }

    // Take field
    pub fn take_planID(&mut self) -> ::std::string::String {
        self.planID.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CancelPlanRequestProto {
    fn is_initialized(&self) -> bool {
        if self.planID.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.planID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.planID.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.planID.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelPlanRequestProto {
        CancelPlanRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "planID",
                |m: &CancelPlanRequestProto| { &m.planID },
                |m: &mut CancelPlanRequestProto| { &mut m.planID },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelPlanRequestProto>(
                "CancelPlanRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelPlanRequestProto {
        static instance: ::protobuf::rt::LazyV2<CancelPlanRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelPlanRequestProto::new)
    }
}

impl ::protobuf::Clear for CancelPlanRequestProto {
    fn clear(&mut self) {
        self.planID.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelPlanRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelPlanRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelPlanResponseProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelPlanResponseProto {
    fn default() -> &'a CancelPlanResponseProto {
        <CancelPlanResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl CancelPlanResponseProto {
    pub fn new() -> CancelPlanResponseProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CancelPlanResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelPlanResponseProto {
        CancelPlanResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelPlanResponseProto>(
                "CancelPlanResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelPlanResponseProto {
        static instance: ::protobuf::rt::LazyV2<CancelPlanResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelPlanResponseProto::new)
    }
}

impl ::protobuf::Clear for CancelPlanResponseProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelPlanResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelPlanResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryPlanStatusRequestProto {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryPlanStatusRequestProto {
    fn default() -> &'a QueryPlanStatusRequestProto {
        <QueryPlanStatusRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl QueryPlanStatusRequestProto {
    pub fn new() -> QueryPlanStatusRequestProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryPlanStatusRequestProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryPlanStatusRequestProto {
        QueryPlanStatusRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryPlanStatusRequestProto>(
                "QueryPlanStatusRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryPlanStatusRequestProto {
        static instance: ::protobuf::rt::LazyV2<QueryPlanStatusRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryPlanStatusRequestProto::new)
    }
}

impl ::protobuf::Clear for QueryPlanStatusRequestProto {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryPlanStatusRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryPlanStatusRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryPlanStatusResponseProto {
    // message fields
    result: ::std::option::Option<u32>,
    planID: ::protobuf::SingularField<::std::string::String>,
    currentStatus: ::protobuf::SingularField<::std::string::String>,
    planFile: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryPlanStatusResponseProto {
    fn default() -> &'a QueryPlanStatusResponseProto {
        <QueryPlanStatusResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl QueryPlanStatusResponseProto {
    pub fn new() -> QueryPlanStatusResponseProto {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;


    pub fn get_result(&self) -> u32 {
        self.result.unwrap_or(0)
    }
    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional string planID = 2;


    pub fn get_planID(&self) -> &str {
        match self.planID.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_planID(&mut self) {
        self.planID.clear();
    }

    pub fn has_planID(&self) -> bool {
        self.planID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planID(&mut self, v: ::std::string::String) {
        self.planID = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_planID(&mut self) -> &mut ::std::string::String {
        if self.planID.is_none() {
            self.planID.set_default();
        }
        self.planID.as_mut().unwrap()
    }

    // Take field
    pub fn take_planID(&mut self) -> ::std::string::String {
        self.planID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string currentStatus = 3;


    pub fn get_currentStatus(&self) -> &str {
        match self.currentStatus.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_currentStatus(&mut self) {
        self.currentStatus.clear();
    }

    pub fn has_currentStatus(&self) -> bool {
        self.currentStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_currentStatus(&mut self, v: ::std::string::String) {
        self.currentStatus = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currentStatus(&mut self) -> &mut ::std::string::String {
        if self.currentStatus.is_none() {
            self.currentStatus.set_default();
        }
        self.currentStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_currentStatus(&mut self) -> ::std::string::String {
        self.currentStatus.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string planFile = 4;


    pub fn get_planFile(&self) -> &str {
        match self.planFile.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_planFile(&mut self) {
        self.planFile.clear();
    }

    pub fn has_planFile(&self) -> bool {
        self.planFile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_planFile(&mut self, v: ::std::string::String) {
        self.planFile = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_planFile(&mut self) -> &mut ::std::string::String {
        if self.planFile.is_none() {
            self.planFile.set_default();
        }
        self.planFile.as_mut().unwrap()
    }

    // Take field
    pub fn take_planFile(&mut self) -> ::std::string::String {
        self.planFile.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryPlanStatusResponseProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.planID)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.currentStatus)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.planFile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.planID.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.currentStatus.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.planFile.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.planID.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.currentStatus.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.planFile.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryPlanStatusResponseProto {
        QueryPlanStatusResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "result",
                |m: &QueryPlanStatusResponseProto| { &m.result },
                |m: &mut QueryPlanStatusResponseProto| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "planID",
                |m: &QueryPlanStatusResponseProto| { &m.planID },
                |m: &mut QueryPlanStatusResponseProto| { &mut m.planID },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currentStatus",
                |m: &QueryPlanStatusResponseProto| { &m.currentStatus },
                |m: &mut QueryPlanStatusResponseProto| { &mut m.currentStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "planFile",
                |m: &QueryPlanStatusResponseProto| { &m.planFile },
                |m: &mut QueryPlanStatusResponseProto| { &mut m.planFile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryPlanStatusResponseProto>(
                "QueryPlanStatusResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryPlanStatusResponseProto {
        static instance: ::protobuf::rt::LazyV2<QueryPlanStatusResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryPlanStatusResponseProto::new)
    }
}

impl ::protobuf::Clear for QueryPlanStatusResponseProto {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.planID.clear();
        self.currentStatus.clear();
        self.planFile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryPlanStatusResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryPlanStatusResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DiskBalancerSettingRequestProto {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiskBalancerSettingRequestProto {
    fn default() -> &'a DiskBalancerSettingRequestProto {
        <DiskBalancerSettingRequestProto as ::protobuf::Message>::default_instance()
    }
}

impl DiskBalancerSettingRequestProto {
    pub fn new() -> DiskBalancerSettingRequestProto {
        ::std::default::Default::default()
    }

    // required string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for DiskBalancerSettingRequestProto {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiskBalancerSettingRequestProto {
        DiskBalancerSettingRequestProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &DiskBalancerSettingRequestProto| { &m.key },
                |m: &mut DiskBalancerSettingRequestProto| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiskBalancerSettingRequestProto>(
                "DiskBalancerSettingRequestProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiskBalancerSettingRequestProto {
        static instance: ::protobuf::rt::LazyV2<DiskBalancerSettingRequestProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiskBalancerSettingRequestProto::new)
    }
}

impl ::protobuf::Clear for DiskBalancerSettingRequestProto {
    fn clear(&mut self) {
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiskBalancerSettingRequestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiskBalancerSettingRequestProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DiskBalancerSettingResponseProto {
    // message fields
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiskBalancerSettingResponseProto {
    fn default() -> &'a DiskBalancerSettingResponseProto {
        <DiskBalancerSettingResponseProto as ::protobuf::Message>::default_instance()
    }
}

impl DiskBalancerSettingResponseProto {
    pub fn new() -> DiskBalancerSettingResponseProto {
        ::std::default::Default::default()
    }

    // required string value = 1;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for DiskBalancerSettingResponseProto {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiskBalancerSettingResponseProto {
        DiskBalancerSettingResponseProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &DiskBalancerSettingResponseProto| { &m.value },
                |m: &mut DiskBalancerSettingResponseProto| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiskBalancerSettingResponseProto>(
                "DiskBalancerSettingResponseProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiskBalancerSettingResponseProto {
        static instance: ::protobuf::rt::LazyV2<DiskBalancerSettingResponseProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiskBalancerSettingResponseProto::new)
    }
}

impl ::protobuf::Clear for DiskBalancerSettingResponseProto {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiskBalancerSettingResponseProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiskBalancerSettingResponseProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cClientDatanodeProtocol.proto\x12\x0bhadoop.hdfs\x1a\x0eSecurity.pr\
    oto\x1a\nhdfs.proto\x1a\x1dReconfigurationProtocol.proto\"`\n#GetReplica\
    VisibleLengthRequestProto\x127\n\x05block\x18\x01\x20\x02(\x0b2\x1f.hado\
    op.hdfs.ExtendedBlockProtoR\x05blockB\0:\0\"B\n$GetReplicaVisibleLengthR\
    esponseProto\x12\x18\n\x06length\x18\x01\x20\x02(\x04R\x06lengthB\0:\0\"\
    \x20\n\x1cRefreshNamenodesRequestProto:\0\"!\n\x1dRefreshNamenodesRespon\
    seProto:\0\"W\n\x1bDeleteBlockPoolRequestProto\x12\x1e\n\tblockPool\x18\
    \x01\x20\x02(\tR\tblockPoolB\0\x12\x16\n\x05force\x18\x02\x20\x02(\x08R\
    \x05forceB\0:\0\"\x20\n\x1cDeleteBlockPoolResponseProto:\0\"\x91\x01\n!G\
    etBlockLocalPathInfoRequestProto\x127\n\x05block\x18\x01\x20\x02(\x0b2\
    \x1f.hadoop.hdfs.ExtendedBlockProtoR\x05blockB\0\x121\n\x05token\x18\x02\
    \x20\x02(\x0b2\x19.hadoop.common.TokenProtoR\x05tokenB\0:\0\"\xa7\x01\n\
    \"GetBlockLocalPathInfoResponseProto\x127\n\x05block\x18\x01\x20\x02(\
    \x0b2\x1f.hadoop.hdfs.ExtendedBlockProtoR\x05blockB\0\x12\x1e\n\tlocalPa\
    th\x18\x02\x20\x02(\tR\tlocalPathB\0\x12&\n\rlocalMetaPath\x18\x03\x20\
    \x02(\tR\rlocalMetaPathB\0:\0\"B\n\x1cShutdownDatanodeRequestProto\x12\
    \x20\n\nforUpgrade\x18\x01\x20\x02(\x08R\nforUpgradeB\0:\0\"!\n\x1dShutd\
    ownDatanodeResponseProto:\0\"\x1c\n\x18EvictWritersRequestProto:\0\"\x1d\
    \n\x19EvictWritersResponseProto:\0\"\x1f\n\x1bGetDatanodeInfoRequestProt\
    o:\0\"e\n\x1cGetDatanodeInfoResponseProto\x12C\n\tlocalInfo\x18\x01\x20\
    \x02(\x0b2#.hadoop.hdfs.DatanodeLocalInfoProtoR\tlocalInfoB\0:\0\"\x1f\n\
    \x1bGetVolumeReportRequestProto:\0\"h\n\x1cGetVolumeReportResponseProto\
    \x12F\n\nvolumeInfo\x18\x01\x20\x03(\x0b2$.hadoop.hdfs.DatanodeVolumeInf\
    oProtoR\nvolumeInfoB\0:\0\"f\n\x1eTriggerBlockReportRequestProto\x12\"\n\
    \x0bincremental\x18\x01\x20\x02(\x08R\x0bincrementalB\0\x12\x1e\n\tnnAdd\
    ress\x18\x02\x20\x01(\tR\tnnAddressB\0:\0\"#\n\x1fTriggerBlockReportResp\
    onseProto:\0\"$\n\x20GetBalancerBandwidthRequestProto:\0\"E\n!GetBalance\
    rBandwidthResponseProto\x12\x1e\n\tbandwidth\x18\x01\x20\x02(\x04R\tband\
    widthB\0:\0\"\xc4\x01\n\"SubmitDiskBalancerPlanRequestProto\x12\x18\n\
    \x06planID\x18\x01\x20\x02(\tR\x06planIDB\0\x12\x14\n\x04plan\x18\x02\
    \x20\x02(\tR\x04planB\0\x12\"\n\x0bplanVersion\x18\x03\x20\x01(\x04R\x0b\
    planVersionB\0\x12*\n\x0fignoreDateCheck\x18\x04\x20\x01(\x08R\x0fignore\
    DateCheckB\0\x12\x1c\n\x08planFile\x18\x05\x20\x02(\tR\x08planFileB\0:\0\
    \"'\n#SubmitDiskBalancerPlanResponseProto:\0\"4\n\x16CancelPlanRequestPr\
    oto\x12\x18\n\x06planID\x18\x01\x20\x02(\tR\x06planIDB\0:\0\"\x1b\n\x17C\
    ancelPlanResponseProto:\0\"\x1f\n\x1bQueryPlanStatusRequestProto:\0\"\
    \x9a\x01\n\x1cQueryPlanStatusResponseProto\x12\x18\n\x06result\x18\x01\
    \x20\x01(\rR\x06resultB\0\x12\x18\n\x06planID\x18\x02\x20\x01(\tR\x06pla\
    nIDB\0\x12&\n\rcurrentStatus\x18\x03\x20\x01(\tR\rcurrentStatusB\0\x12\
    \x1c\n\x08planFile\x18\x04\x20\x01(\tR\x08planFileB\0:\0\"7\n\x1fDiskBal\
    ancerSettingRequestProto\x12\x12\n\x03key\x18\x01\x20\x02(\tR\x03keyB\0:\
    \0\"<\n\x20DiskBalancerSettingResponseProto\x12\x16\n\x05value\x18\x01\
    \x20\x02(\tR\x05valueB\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
