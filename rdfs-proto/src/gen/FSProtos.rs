// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `FSProtos.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct FsPermissionProto {
    // message fields
    perm: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FsPermissionProto {
    fn default() -> &'a FsPermissionProto {
        <FsPermissionProto as ::protobuf::Message>::default_instance()
    }
}

impl FsPermissionProto {
    pub fn new() -> FsPermissionProto {
        ::std::default::Default::default()
    }

    // required uint32 perm = 1;


    pub fn get_perm(&self) -> u32 {
        self.perm.unwrap_or(0)
    }
    pub fn clear_perm(&mut self) {
        self.perm = ::std::option::Option::None;
    }

    pub fn has_perm(&self) -> bool {
        self.perm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_perm(&mut self, v: u32) {
        self.perm = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for FsPermissionProto {
    fn is_initialized(&self) -> bool {
        if self.perm.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.perm = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.perm {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.perm {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FsPermissionProto {
        FsPermissionProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "perm",
                |m: &FsPermissionProto| { &m.perm },
                |m: &mut FsPermissionProto| { &mut m.perm },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FsPermissionProto>(
                "FsPermissionProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FsPermissionProto {
        static instance: ::protobuf::rt::LazyV2<FsPermissionProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FsPermissionProto::new)
    }
}

impl ::protobuf::Clear for FsPermissionProto {
    fn clear(&mut self) {
        self.perm = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FsPermissionProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FsPermissionProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileStatusProto {
    // message fields
    fileType: ::std::option::Option<FileStatusProto_FileType>,
    path: ::protobuf::SingularField<::std::string::String>,
    length: ::std::option::Option<u64>,
    pub permission: ::protobuf::SingularPtrField<FsPermissionProto>,
    owner: ::protobuf::SingularField<::std::string::String>,
    group: ::protobuf::SingularField<::std::string::String>,
    modification_time: ::std::option::Option<u64>,
    access_time: ::std::option::Option<u64>,
    symlink: ::protobuf::SingularField<::std::string::String>,
    block_replication: ::std::option::Option<u32>,
    block_size: ::std::option::Option<u64>,
    encryption_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    ec_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    flags: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileStatusProto {
    fn default() -> &'a FileStatusProto {
        <FileStatusProto as ::protobuf::Message>::default_instance()
    }
}

impl FileStatusProto {
    pub fn new() -> FileStatusProto {
        ::std::default::Default::default()
    }

    // required .hadoop.fs.FileStatusProto.FileType fileType = 1;


    pub fn get_fileType(&self) -> FileStatusProto_FileType {
        self.fileType.unwrap_or(FileStatusProto_FileType::FT_DIR)
    }
    pub fn clear_fileType(&mut self) {
        self.fileType = ::std::option::Option::None;
    }

    pub fn has_fileType(&self) -> bool {
        self.fileType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fileType(&mut self, v: FileStatusProto_FileType) {
        self.fileType = ::std::option::Option::Some(v);
    }

    // required string path = 2;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 length = 3;


    pub fn get_length(&self) -> u64 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u64) {
        self.length = ::std::option::Option::Some(v);
    }

    // optional .hadoop.fs.FsPermissionProto permission = 4;


    pub fn get_permission(&self) -> &FsPermissionProto {
        self.permission.as_ref().unwrap_or_else(|| <FsPermissionProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_permission(&mut self) {
        self.permission.clear();
    }

    pub fn has_permission(&self) -> bool {
        self.permission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_permission(&mut self, v: FsPermissionProto) {
        self.permission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_permission(&mut self) -> &mut FsPermissionProto {
        if self.permission.is_none() {
            self.permission.set_default();
        }
        self.permission.as_mut().unwrap()
    }

    // Take field
    pub fn take_permission(&mut self) -> FsPermissionProto {
        self.permission.take().unwrap_or_else(|| FsPermissionProto::new())
    }

    // optional string owner = 5;


    pub fn get_owner(&self) -> &str {
        match self.owner.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_owner(&mut self) {
        self.owner.clear();
    }

    pub fn has_owner(&self) -> bool {
        self.owner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner(&mut self, v: ::std::string::String) {
        self.owner = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner(&mut self) -> &mut ::std::string::String {
        if self.owner.is_none() {
            self.owner.set_default();
        }
        self.owner.as_mut().unwrap()
    }

    // Take field
    pub fn take_owner(&mut self) -> ::std::string::String {
        self.owner.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string group = 6;


    pub fn get_group(&self) -> &str {
        match self.group.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    pub fn has_group(&self) -> bool {
        self.group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        if self.group.is_none() {
            self.group.set_default();
        }
        self.group.as_mut().unwrap()
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        self.group.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 modification_time = 7;


    pub fn get_modification_time(&self) -> u64 {
        self.modification_time.unwrap_or(0)
    }
    pub fn clear_modification_time(&mut self) {
        self.modification_time = ::std::option::Option::None;
    }

    pub fn has_modification_time(&self) -> bool {
        self.modification_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modification_time(&mut self, v: u64) {
        self.modification_time = ::std::option::Option::Some(v);
    }

    // optional uint64 access_time = 8;


    pub fn get_access_time(&self) -> u64 {
        self.access_time.unwrap_or(0)
    }
    pub fn clear_access_time(&mut self) {
        self.access_time = ::std::option::Option::None;
    }

    pub fn has_access_time(&self) -> bool {
        self.access_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_time(&mut self, v: u64) {
        self.access_time = ::std::option::Option::Some(v);
    }

    // optional string symlink = 9;


    pub fn get_symlink(&self) -> &str {
        match self.symlink.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_symlink(&mut self) {
        self.symlink.clear();
    }

    pub fn has_symlink(&self) -> bool {
        self.symlink.is_some()
    }

    // Param is passed by value, moved
    pub fn set_symlink(&mut self, v: ::std::string::String) {
        self.symlink = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symlink(&mut self) -> &mut ::std::string::String {
        if self.symlink.is_none() {
            self.symlink.set_default();
        }
        self.symlink.as_mut().unwrap()
    }

    // Take field
    pub fn take_symlink(&mut self) -> ::std::string::String {
        self.symlink.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 block_replication = 10;


    pub fn get_block_replication(&self) -> u32 {
        self.block_replication.unwrap_or(0)
    }
    pub fn clear_block_replication(&mut self) {
        self.block_replication = ::std::option::Option::None;
    }

    pub fn has_block_replication(&self) -> bool {
        self.block_replication.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_replication(&mut self, v: u32) {
        self.block_replication = ::std::option::Option::Some(v);
    }

    // optional uint64 block_size = 11;


    pub fn get_block_size(&self) -> u64 {
        self.block_size.unwrap_or(0)
    }
    pub fn clear_block_size(&mut self) {
        self.block_size = ::std::option::Option::None;
    }

    pub fn has_block_size(&self) -> bool {
        self.block_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_size(&mut self, v: u64) {
        self.block_size = ::std::option::Option::Some(v);
    }

    // optional bytes encryption_data = 15;


    pub fn get_encryption_data(&self) -> &[u8] {
        match self.encryption_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_encryption_data(&mut self) {
        self.encryption_data.clear();
    }

    pub fn has_encryption_data(&self) -> bool {
        self.encryption_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.encryption_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encryption_data.is_none() {
            self.encryption_data.set_default();
        }
        self.encryption_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryption_data(&mut self) -> ::std::vec::Vec<u8> {
        self.encryption_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes ec_data = 17;


    pub fn get_ec_data(&self) -> &[u8] {
        match self.ec_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_ec_data(&mut self) {
        self.ec_data.clear();
    }

    pub fn has_ec_data(&self) -> bool {
        self.ec_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ec_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.ec_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ec_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ec_data.is_none() {
            self.ec_data.set_default();
        }
        self.ec_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_ec_data(&mut self) -> ::std::vec::Vec<u8> {
        self.ec_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 flags = 18;


    pub fn get_flags(&self) -> u32 {
        self.flags.unwrap_or(0u32)
    }
    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for FileStatusProto {
    fn is_initialized(&self) -> bool {
        if self.fileType.is_none() {
            return false;
        }
        if self.path.is_none() {
            return false;
        }
        for v in &self.permission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.fileType, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.permission)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.owner)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.group)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.modification_time = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.access_time = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.symlink)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.block_replication = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_size = ::std::option::Option::Some(tmp);
                },
                15 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.encryption_data)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.ec_data)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.flags = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.fileType {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.permission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.owner.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.group.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.modification_time {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.access_time {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.symlink.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.block_replication {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.block_size {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.encryption_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(15, &v);
        }
        if let Some(ref v) = self.ec_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(17, &v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::value_size(18, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.fileType {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.length {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.permission.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.owner.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.group.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(v) = self.modification_time {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.access_time {
            os.write_uint64(8, v)?;
        }
        if let Some(ref v) = self.symlink.as_ref() {
            os.write_string(9, &v)?;
        }
        if let Some(v) = self.block_replication {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.block_size {
            os.write_uint64(11, v)?;
        }
        if let Some(ref v) = self.encryption_data.as_ref() {
            os.write_bytes(15, &v)?;
        }
        if let Some(ref v) = self.ec_data.as_ref() {
            os.write_bytes(17, &v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(18, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileStatusProto {
        FileStatusProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FileStatusProto_FileType>>(
                "fileType",
                |m: &FileStatusProto| { &m.fileType },
                |m: &mut FileStatusProto| { &mut m.fileType },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &FileStatusProto| { &m.path },
                |m: &mut FileStatusProto| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "length",
                |m: &FileStatusProto| { &m.length },
                |m: &mut FileStatusProto| { &mut m.length },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FsPermissionProto>>(
                "permission",
                |m: &FileStatusProto| { &m.permission },
                |m: &mut FileStatusProto| { &mut m.permission },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "owner",
                |m: &FileStatusProto| { &m.owner },
                |m: &mut FileStatusProto| { &mut m.owner },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &FileStatusProto| { &m.group },
                |m: &mut FileStatusProto| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "modification_time",
                |m: &FileStatusProto| { &m.modification_time },
                |m: &mut FileStatusProto| { &mut m.modification_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "access_time",
                |m: &FileStatusProto| { &m.access_time },
                |m: &mut FileStatusProto| { &mut m.access_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symlink",
                |m: &FileStatusProto| { &m.symlink },
                |m: &mut FileStatusProto| { &mut m.symlink },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "block_replication",
                |m: &FileStatusProto| { &m.block_replication },
                |m: &mut FileStatusProto| { &mut m.block_replication },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block_size",
                |m: &FileStatusProto| { &m.block_size },
                |m: &mut FileStatusProto| { &mut m.block_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "encryption_data",
                |m: &FileStatusProto| { &m.encryption_data },
                |m: &mut FileStatusProto| { &mut m.encryption_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ec_data",
                |m: &FileStatusProto| { &m.ec_data },
                |m: &mut FileStatusProto| { &mut m.ec_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "flags",
                |m: &FileStatusProto| { &m.flags },
                |m: &mut FileStatusProto| { &mut m.flags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileStatusProto>(
                "FileStatusProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FileStatusProto {
        static instance: ::protobuf::rt::LazyV2<FileStatusProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FileStatusProto::new)
    }
}

impl ::protobuf::Clear for FileStatusProto {
    fn clear(&mut self) {
        self.fileType = ::std::option::Option::None;
        self.path.clear();
        self.length = ::std::option::Option::None;
        self.permission.clear();
        self.owner.clear();
        self.group.clear();
        self.modification_time = ::std::option::Option::None;
        self.access_time = ::std::option::Option::None;
        self.symlink.clear();
        self.block_replication = ::std::option::Option::None;
        self.block_size = ::std::option::Option::None;
        self.encryption_data.clear();
        self.ec_data.clear();
        self.flags = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileStatusProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileStatusProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FileStatusProto_FileType {
    FT_DIR = 1,
    FT_FILE = 2,
    FT_SYMLINK = 3,
}

impl ::protobuf::ProtobufEnum for FileStatusProto_FileType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FileStatusProto_FileType> {
        match value {
            1 => ::std::option::Option::Some(FileStatusProto_FileType::FT_DIR),
            2 => ::std::option::Option::Some(FileStatusProto_FileType::FT_FILE),
            3 => ::std::option::Option::Some(FileStatusProto_FileType::FT_SYMLINK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FileStatusProto_FileType] = &[
            FileStatusProto_FileType::FT_DIR,
            FileStatusProto_FileType::FT_FILE,
            FileStatusProto_FileType::FT_SYMLINK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FileStatusProto_FileType>("FileStatusProto.FileType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FileStatusProto_FileType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for FileStatusProto_FileType {
    fn default() -> Self {
        FileStatusProto_FileType::FT_DIR
    }
}

impl ::protobuf::reflect::ProtobufValue for FileStatusProto_FileType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FileStatusProto_Flags {
    HAS_ACL = 1,
    HAS_CRYPT = 2,
    HAS_EC = 4,
    SNAPSHOT_ENABLED = 8,
}

impl ::protobuf::ProtobufEnum for FileStatusProto_Flags {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FileStatusProto_Flags> {
        match value {
            1 => ::std::option::Option::Some(FileStatusProto_Flags::HAS_ACL),
            2 => ::std::option::Option::Some(FileStatusProto_Flags::HAS_CRYPT),
            4 => ::std::option::Option::Some(FileStatusProto_Flags::HAS_EC),
            8 => ::std::option::Option::Some(FileStatusProto_Flags::SNAPSHOT_ENABLED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FileStatusProto_Flags] = &[
            FileStatusProto_Flags::HAS_ACL,
            FileStatusProto_Flags::HAS_CRYPT,
            FileStatusProto_Flags::HAS_EC,
            FileStatusProto_Flags::SNAPSHOT_ENABLED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FileStatusProto_Flags>("FileStatusProto.Flags", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FileStatusProto_Flags {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for FileStatusProto_Flags {
    fn default() -> Self {
        FileStatusProto_Flags::HAS_ACL
    }
}

impl ::protobuf::reflect::ProtobufValue for FileStatusProto_Flags {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalFileSystemPathHandleProto {
    // message fields
    mtime: ::std::option::Option<u64>,
    path: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalFileSystemPathHandleProto {
    fn default() -> &'a LocalFileSystemPathHandleProto {
        <LocalFileSystemPathHandleProto as ::protobuf::Message>::default_instance()
    }
}

impl LocalFileSystemPathHandleProto {
    pub fn new() -> LocalFileSystemPathHandleProto {
        ::std::default::Default::default()
    }

    // optional uint64 mtime = 1;


    pub fn get_mtime(&self) -> u64 {
        self.mtime.unwrap_or(0)
    }
    pub fn clear_mtime(&mut self) {
        self.mtime = ::std::option::Option::None;
    }

    pub fn has_mtime(&self) -> bool {
        self.mtime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mtime(&mut self, v: u64) {
        self.mtime = ::std::option::Option::Some(v);
    }

    // optional string path = 2;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for LocalFileSystemPathHandleProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.mtime = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.mtime {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.mtime {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalFileSystemPathHandleProto {
        LocalFileSystemPathHandleProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "mtime",
                |m: &LocalFileSystemPathHandleProto| { &m.mtime },
                |m: &mut LocalFileSystemPathHandleProto| { &mut m.mtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &LocalFileSystemPathHandleProto| { &m.path },
                |m: &mut LocalFileSystemPathHandleProto| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalFileSystemPathHandleProto>(
                "LocalFileSystemPathHandleProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalFileSystemPathHandleProto {
        static instance: ::protobuf::rt::LazyV2<LocalFileSystemPathHandleProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalFileSystemPathHandleProto::new)
    }
}

impl ::protobuf::Clear for LocalFileSystemPathHandleProto {
    fn clear(&mut self) {
        self.mtime = ::std::option::Option::None;
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalFileSystemPathHandleProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalFileSystemPathHandleProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eFSProtos.proto\x12\thadoop.fs\"+\n\x11FsPermissionProto\x12\x14\n\
    \x04perm\x18\x01\x20\x02(\rR\x04permB\0:\0\"\x95\x05\n\x0fFileStatusProt\
    o\x12A\n\x08fileType\x18\x01\x20\x02(\x0e2#.hadoop.fs.FileStatusProto.Fi\
    leTypeR\x08fileTypeB\0\x12\x14\n\x04path\x18\x02\x20\x02(\tR\x04pathB\0\
    \x12\x18\n\x06length\x18\x03\x20\x01(\x04R\x06lengthB\0\x12>\n\npermissi\
    on\x18\x04\x20\x01(\x0b2\x1c.hadoop.fs.FsPermissionProtoR\npermissionB\0\
    \x12\x16\n\x05owner\x18\x05\x20\x01(\tR\x05ownerB\0\x12\x16\n\x05group\
    \x18\x06\x20\x01(\tR\x05groupB\0\x12-\n\x11modification_time\x18\x07\x20\
    \x01(\x04R\x10modificationTimeB\0\x12!\n\x0baccess_time\x18\x08\x20\x01(\
    \x04R\naccessTimeB\0\x12\x1a\n\x07symlink\x18\t\x20\x01(\tR\x07symlinkB\
    \0\x12-\n\x11block_replication\x18\n\x20\x01(\rR\x10blockReplicationB\0\
    \x12\x1f\n\nblock_size\x18\x0b\x20\x01(\x04R\tblockSizeB\0\x12)\n\x0fenc\
    ryption_data\x18\x0f\x20\x01(\x0cR\x0eencryptionDataB\0\x12\x19\n\x07ec_\
    data\x18\x11\x20\x01(\x0cR\x06ecDataB\0\x12\x19\n\x05flags\x18\x12\x20\
    \x01(\r:\x010R\x05flagsB\0\"5\n\x08FileType\x12\n\n\x06FT_DIR\x10\x01\
    \x12\x0b\n\x07FT_FILE\x10\x02\x12\x0e\n\nFT_SYMLINK\x10\x03\x1a\0\"G\n\
    \x05Flags\x12\x0b\n\x07HAS_ACL\x10\x01\x12\r\n\tHAS_CRYPT\x10\x02\x12\n\
    \n\x06HAS_EC\x10\x04\x12\x14\n\x10SNAPSHOT_ENABLED\x10\x08\x1a\0:\0\"P\n\
    \x1eLocalFileSystemPathHandleProto\x12\x16\n\x05mtime\x18\x01\x20\x01(\
    \x04R\x05mtimeB\0\x12\x14\n\x04path\x18\x02\x20\x01(\tR\x04pathB\0:\0B\0\
    b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
